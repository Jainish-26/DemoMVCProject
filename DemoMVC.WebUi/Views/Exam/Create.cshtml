@model DemoMVC.WebUi.Models.ExamModel
@using Kendo.Mvc.UI
@using DemoMVC.WebUi.Helper
@using DemoMVC.WebUi.Controllers
@using DemoMVC.Models

@{
    ViewBag.Title = Model.ExamId > 0 ? "Edit Exam" : "Create Exam";
    string formCode = AuthorizeFormAccess.FormAccessCode.EXAM.ToString();
    string role = SessionHelper.RoleName;
    var formName = FormUtility.GetFormName(formCode);
    string parentFormname = FormUtility.GetParentFormName(formCode);
    ViewBag.Title = formName;
    BaseController _base = new BaseController();
    bool AllowedEdit = _base.CheckPermission(formCode, AccessPermission.IsEdit);
    bool AllowedAdd = _base.CheckPermission(formCode, AccessPermission.IsAdd);
    bool AllowedDelete = _base.CheckPermission(formCode, AccessPermission.IsDelete);
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewBag.Title</title>

    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />

    <style>
        .form-container {
            width: 100%;
            margin-inline: 4px;
/*            padding: 15px 25px;*/
/*            background-color: #f8f9fa;*/
            border-radius: 8px;
        }

        .form-label {
            font-weight: bold;
            margin-bottom: 5px;
            display: block;
        }

        .required-icon {
            color: red;
            margin-left: 0px;
        }

        .small-input {
            width: 100%;
            max-width: 70px;
        }

        .same-height {
            height: 38px;
            max-width: 250px;
        }

        .form-control.same-height,
        .form-select.same-height {
            height: 38px !important;
            min-height: 38px !important;
            box-sizing: border-box !important;
            padding: 6px 12px;
        }

        .toggle-input {
            display: none;
        }

        .toggle-switch {
            width: 40px;
            height: 20px;
            border-radius: 10px;
            background: #ccc;
            position: relative;
            cursor: pointer;
            display: inline-block;
        }

            .toggle-switch::before {
                content: '';
                position: absolute;
                width: 18px;
                height: 18px;
                background: white;
                border-radius: 50%;
                top: 50%;
                left: 2px;
                transform: translateY(-50%);
                transition: 0.3s;
            }

        .toggle-input:checked + .toggle-switch {
            background: #28a745;
        }

            .toggle-input:checked + .toggle-switch::before {
                left: 20px;
            }

        .row.g-3 {
            margin-bottom: 10px;
        }

        .text-danger {
            font-size: 12px;
            margin-top: 4px;
        }

        .invalid-input {
            border: 2px solid red;
            background-color: #ffe6e6;
        }
    </style>
</head>
<body>
    <div>
        <!-- Header Row -->
        <div class="d-flex justify-content-between align-items-center mx-4 ">
            <h2 class="text m-0">@ViewBag.Title</h2>
            <div class="d-flex align-items-center m-2">
                <p class="fw-bold mb-1 me-3"><span id="totalMarks">0</span></p>
                <button type="button" onclick="saveExamAndQuestions()" class="btn btn-warning rounded-pill px-4 shadow-sm fw-bold">
                    <i class="fa fa-save"></i> Save
                </button>
                <a href="@Url.Action("Index")" class="btn btn-outline-success rounded-pill px-4 shadow-sm ms-2">
                    <i class="fa fa-arrow-left"></i> Back
                </a>
            </div>
        </div>
        <!-- Form Container -->
        <div class="form-container mx-4">
            @Html.Hidden("hdnFormAccessCode", formCode)
            <form id="form" enctype="multipart/form-data">
                @Html.HiddenFor(model => model.ExamId)
                @Html.AntiForgeryToken()
                <div class="row g-3 align-items-end">
                    <div class="col-md-3">
                        <label class="form-label">Exam Name <span class="required-icon">*</span></label>
                        @Html.TextBoxFor(model => model.ExamName, new { @class = "form-control same-height", placeholder = "Enter Exam Name" })
                        @Html.ValidationMessageFor(model => model.ExamName, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">Exam Code <span class="required-icon">*</span></label>
                        @if (Model.ExamId > 0)
                        {
                            @Html.TextBoxFor(model => model.ExamCode, new { @class = "form-control same-height", @readonly = "readonly" })
                        }
                        else
                        {
                            @Html.TextBoxFor(model => model.ExamCode, new { @class = "form-control same-height text-uppercase", placeholder = "Enter Exam Code" })
                        }
                        @Html.ValidationMessageFor(model => model.ExamCode, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-1">
                        <label class="form-label">Marks <span class="required-icon">*</span></label>
                        @Html.TextBoxFor(model => model.TotalMarks, new { @class = "form-control small-input same-height", placeholder = "Marks" })
                        @Html.ValidationMessageFor(model => model.TotalMarks, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-1">
                        <label class="form-label">Passing Marks<span class="required-icon">*</span></label>
                        @Html.TextBoxFor(model => model.PassingMarks, new { @class = "form-control small-input same-height", placeholder = "Pass" })
                        @Html.ValidationMessageFor(model => model.PassingMarks, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-1">
                        <label class="form-label">Duration(mins)<span class="required-icon">*</span></label>
                        @Html.TextBoxFor(model => model.DurationMin, new { @class = "form-control small-input same-height", placeholder = "Time" })
                        @Html.ValidationMessageFor(model => model.DurationMin, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">Status <span class="required-icon">*</span></label>
                        @Html.DropDownListFor(model => model.ExamStatus, Model._statusList, new { @class = "form-select same-height" })
                        @Html.ValidationMessageFor(model => model.ExamStatus, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-2 d-flex align-items-center">
                        <label class="me-3">Active?</label>
                        <input type="checkbox" id="IsActiveToggle" class="toggle-input" @if (Model.IsActive) { <text> checked</text> }>
                        <label for="IsActiveToggle" class="toggle-switch"></label>
                        @Html.HiddenFor(model => model.IsActive, new { @id = "IsActive" })
                    </div>
                </div>
            </form>
        </div>
        <h4 class=" text mx-4">Selected Questions</h4>
        <div class="common_white_box listingpage m-4">
            <div class="page-loader k-loading-image"></div>
            @(Html.Kendo().Grid<DemoMVC.Models.QuestionGridModel>()
            .Name("gridExamQuestion")
            .AutoBind(true)
            .Columns(columns =>
            {

                columns.Bound(c => c.QuestionId).Width("7%")
                .ClientTemplate("<input type='checkbox' class='toggle-edit' data-id='#= QuestionId #' />")
                .Title("Selected Question");
                columns.Bound(c => c.Subject).Width("7%").Title("Subject");
                columns.Bound(c => c.Type).Width("7%").Title("Answer Type");
                columns.Bound(c => c.QuestionText).Width("7%").Title("Question")
                .ClientTemplate("<span>#:QuestionText.substring(0, 80) #</span>");
                columns.Bound(c => c.Marks).Width("14%").Title("Marks")
                .ClientTemplate("<input type='number' class='form-control marks-input' value='#=Marks#' data-id='#=QuestionId#' min='1' step='1' />");
                columns.Bound(c => c.QuestionId).HeaderHtmlAttributes(new { @class = "center_text" }).HtmlAttributes(new { @class = "kendogrid_Action center_text" }).ClientTemplate("<div class='k_action_table'>" + (AllowedEdit ? "<a href='javascript:void()' onclick=\"fnShowDetails(#= QuestionId #,'Access')\"><i class='fa fa-eye'></i></a>" : "")).Filterable(false).Title("Action").Width("7%").Sortable(false);
            })
            .NoRecords("No record found")
            .Events(evt => evt
               .DataBinding("fnKendoGridCommonDataBinding")
               .DataBound("fnKendoGridDataBoundEventForExam")
            )
            .Sortable()
            .Pageable(pageable => pageable
                .Refresh(true)
                .PageSizes(new[] {10,20, 50, 100, 200 })
                .ButtonCount(5)
            )
             .DataSource(dataSource => dataSource
                 .Ajax()
                 .Read(read => read.Action("GetGridExamQuestionData", "Exam").Data("sendExamId"))
                 .ServerOperation(false)
                 .PageSize(5)
             )
        )
        </div>
        <h4 class=" text mx-4">Questions Bank</h4>
        <div class="common_white_box listingpage m-4">
            <div class="page-loader k-loading-image"></div>
            @(Html.Kendo().Grid<DemoMVC.Models.QuestionGridModel>()
            .Name("gridUnassignedQuestion")
            .AutoBind(true)
            .Columns(columns =>
            {
                columns.Bound(c => c.QuestionId).Width("7%")
                .ClientTemplate("<input type='checkbox' class='toggle-edit' data-id='#= QuestionId #' />")
                .Title("Select Question");
                columns.Bound(c => c.Subject).Width("7%").Title("Subject");
                columns.Bound(c => c.Type).Width("7%").Title("Answer Type");
                columns.Bound(c => c.QuestionText).Width("7%").Title("Question")
                .ClientTemplate("<span>#:QuestionText.substring(0, 80) #</span>");
                columns.Bound(c => c.Marks).Width("14%").Title("Marks")
                .ClientTemplate("<input type='number' class='form-control marks-input' value='#=Marks#' data-id='#=QuestionId#' min='1' step='1' />");
                columns.Bound(c => c.QuestionId).HeaderHtmlAttributes(new { @class = "center_text" }).HtmlAttributes(new { @class = "kendogrid_Action center_text" }).ClientTemplate("<div class='k_action_table'>" + (AllowedEdit ? "<a href='javascript:void()' onclick=\"fnShowDetails(#= QuestionId #,'Access')\"><i class='fa fa-eye'></i></a>" : "")).Filterable(false).Title("Action").Width("7%").Sortable(false);
            })
            .NoRecords("No record found")
            .Events(evt => evt
                .DataBinding("fnKendoGridCommonDataBinding")
                .DataBound("onDataBound")
            )
            .Sortable()
            .Pageable(pageable => pageable
                .Refresh(true)
                .PageSizes(new[] {10,20, 50, 100, 200 })
                .ButtonCount(5)
            )
            .DataSource(dataSource => dataSource
                .Ajax()
                .Read(read => read.Action("GetGridUnassignedQuestionData", "Exam").Data("sendExamId"))
                .ServerOperation(false)
                .PageSize(5)
            )
        )
        </div>
    </div>
    <div id="questionModelContainer"></div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    @*Set ViewBagId For GridData*@
    <script>
        function sendExamId()
       {
           return {
               examId: '@ViewBag.ExamId'
           };
       }

    </script>
    @*Handle Marks Count For Selected Questions*@
    <script>
        var selectedRows = {};
        var totalMarks = 0;

        $(document).ready(function () {
            updateTotalMarks();

            // Restrict negative or zero marks input
            $(document).on("input", ".marks-input", function () {
                validateMarksInput($(this));
            });

            // Handle change event for checkboxes and marks input
            $(document).on("change", "#gridUnassignedQuestion .toggle-edit, #gridUnassignedQuestion .marks-input", function () {
                handleMarksChange("#gridUnassignedQuestion", this);
            });

            $(document).on("change", "#gridExamQuestion .toggle-edit, #gridExamQuestion .marks-input", function () {
                handleMarksChange("#gridExamQuestion", this);
            });
        });

        function validateMarksInput(inputElement) {
            var value = parseFloat(inputElement.val());

            if (isNaN(value) || value <= 0) {
                inputElement.addClass("invalid-input"); // Add red border
            } else {
                inputElement.removeClass("invalid-input"); // Remove red border if valid
            }
        }

        function handleMarksChange(gridId, element) {
            var grid = $(gridId).data("kendoGrid");
            var row = $(element).closest("tr");
            var dataItem = grid.dataItem(row);

            var questionId = dataItem.QuestionId;
            var marks = parseFloat(row.find(".marks-input").val()) || 0;
            var isChecked = row.find(".toggle-edit").is(":checked");

            // Ensure valid marks (greater than 0)
            if (marks <= 0) {
                marks = 0;
                row.find(".marks-input").val("").addClass("invalid-input"); // Reset invalid input
            } else {
                row.find(".marks-input").removeClass("invalid-input"); // Remove red border if valid
            }

            if (gridId === "#gridUnassignedQuestion" || gridId === "#gridExamQuestion") {
                if (isChecked) {
                    selectedRows[questionId] = marks;
                } else {
                    delete selectedRows[questionId];
                }
            }

            updateTotalMarks();
        }

        function fnKendoGridDataBoundEventForExam() {
            $('#gridPageLoader').remove();
            $(window).trigger('resize');
            try {
                this._adjustLockedHorizontalScrollBar();
            } catch (e) { }

            var grid = $("#gridExamQuestion").data("kendoGrid");
            var allData = grid.dataSource.data();

            allData.forEach(function (item) {
                if (!(item.QuestionId in selectedRows)) {
                    selectedRows[item.QuestionId] = parseFloat(item.Marks) || 0;
                }
            });

            updateTotalMarks();
        }

        function updateTotalMarks() {
            totalMarks = 0;

            for (var key in selectedRows) {
                totalMarks += selectedRows[key];
            }
            $("#totalMarks").text("Total Marks: " + totalMarks);
        }
    </script>

    @*//show Details PopUp*@
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            var toggleInput = document.getElementById("IsActiveToggle");
            var hiddenInput = document.getElementById("IsActive");

            function updateLabel() {
                hiddenInput.value = toggleInput.checked ? "True" : "False";
            }

            toggleInput.addEventListener("change", updateLabel);
            updateLabel(); // Set initial state
        });
         function fnShowDetails(QuestionId,access) {
             $.ajax({
                 url: '@Url.Action("GetQuestionDetails","Question")',
                 type: 'GET',
                 data: { id: QuestionId, access },
                 success: function (response) {
                     $("#questionModelContainer").html(response);
                     $("#questionDetailsModal").modal("show");
                 },
                 error: function () {
                     alert(" Failed To Load Data");
                 }
             });
         }
    </script>
    @*Send Exam And Questions In Controller By AJAX*@
    <script>
        var selectedQuestionsByGrid = {};
        var unselectedQuestionsByGrid = {};
        var preselectedQuestions = {};

        function storeSelection(gridId) {
            var grid = $("#" + gridId).data("kendoGrid");
            var rows = grid.tbody.find("tr");

            rows.each(function () {
                var row = $(this);
                var dataItem = grid.dataItem(row);
                var checkbox = row.find(".toggle-edit");

                var questionId = dataItem.QuestionId;
                var marks = parseFloat(row.find(".marks-input").val()) || 0;
                var isChecked = checkbox.is(":checked");

                if (!selectedQuestionsByGrid[gridId]) {
                    selectedQuestionsByGrid[gridId] = {};
                }

                if (isChecked) {
                    selectedQuestionsByGrid[gridId][questionId] = {
                        QuestionId: questionId,
                        Marks: marks
                    };
                    delete unselectedQuestionsByGrid[questionId];
                } else {
                    delete selectedQuestionsByGrid[gridId][questionId];
                    if (gridId === "gridExamQuestion" && preselectedQuestions[questionId]) {
                        unselectedQuestionsByGrid[questionId] = true;
                    }
                }
            });
        }

        function restoreSelections(gridId) {
            var grid = $("#" + gridId).data("kendoGrid");

            grid.tbody.find("tr").each(function () {
                var row = $(this);
                var dataItem = grid.dataItem(row);
                var checkbox = row.find(".toggle-edit");

                var questionId = dataItem.QuestionId;

                if (selectedQuestionsByGrid[gridId] && selectedQuestionsByGrid[gridId][questionId]) {
                    checkbox.prop("checked", true);
                    row.find(".marks-input").val(selectedQuestionsByGrid[gridId][questionId].Marks);
                }

                if (preselectedQuestions[questionId] && !unselectedQuestionsByGrid[questionId]) {
                    checkbox.prop("checked", true);
                }

                if (unselectedQuestionsByGrid[questionId]) {
                    checkbox.prop("checked", false);
                }
            });
        }

        function onDataBound(e) {
            var gridId = e.sender.element.attr("id");

            if (gridId === "gridExamQuestion") {
                var grid = $("#" + gridId).data("kendoGrid");
                grid.dataSource.data().forEach(function (item) {
                    if (!preselectedQuestions[item.QuestionId]) {
                        preselectedQuestions[item.QuestionId] = true;
                    }

                    if (!unselectedQuestionsByGrid[item.QuestionId]) {
                        if (!selectedQuestionsByGrid[gridId]) {
                            selectedQuestionsByGrid[gridId] = {};
                        }

                        if (!selectedQuestionsByGrid[gridId][item.QuestionId]) {
                            selectedQuestionsByGrid[gridId][item.QuestionId] = {
                                QuestionId: item.QuestionId,
                                Marks: parseFloat(item.Marks) || 0
                            };
                        }
                    }
                });
            }

            restoreSelections(gridId);
        }

        $(document).on("change", ".toggle-edit", function () {
            var checkbox = $(this);
            var row = checkbox.closest("tr");
            var grid = row.closest(".k-grid").data("kendoGrid");
            var gridId = grid.element.attr("id");

            storeSelection(gridId);
        });

// ✅ When marks are changed, update marks in `selectedQuestionsByGrid`
            $(document).on("input", ".marks-input", function () {
                var row = $(this).closest("tr");
                var grid = row.closest(".k-grid").data("kendoGrid");
                var gridId = grid.element.attr("id");
                var dataItem = grid.dataItem(row);

                var questionId = dataItem.QuestionId;
                var marks = parseFloat($(this).val()) || 0;

                // ✅ Only update marks if question is already selected
                if (selectedQuestionsByGrid[gridId] && selectedQuestionsByGrid[gridId][questionId]) {
                    selectedQuestionsByGrid[gridId][questionId].Marks = marks;
                }
            });

            function saveExamAndQuestions() {
                    var form = $("#form");
                    var formData = $("#form").serializeArray();
                    var formObject = {};
                    if (!form.valid()) {
                        return;
                    }
                    $.each(formData, function (index, field) {
                        formObject[field.name] = field.value;
                    });

                    var selectedQuestions = [];
                    var totalSelectedMarks = 0;

                    Object.values(selectedQuestionsByGrid).forEach(gridData => {
                        Object.values(gridData).forEach(question => {
                            selectedQuestions.push(question);
                            totalSelectedMarks += question.Marks;
                        });
                    });

                var examStatus = formObject["ExamStatus"];
                var totalExamMarks = parseFloat(formObject["TotalMarks"]) || 0;

                if (examStatus === "PUBLISHED" && selectedQuestions.length === 0) {
                    Swal.fire("Validation Error", "At least one question must be selected when exam is published!", "warning");
                    return;
                }

                if (examStatus === "PUBLISHED" && totalSelectedMarks !== totalExamMarks) {
                    Swal.fire("Validation Error", `Total selected marks (${totalSelectedMarks}) must match the exam total marks (${totalExamMarks})!`, "warning");
                    return;
                }

                var requestData = {
                    Exam: formObject,
                    SelectedQuestions: selectedQuestions,
                };

                console.log("Final Request Data:", requestData);

                $.ajax({
                    url: "/Exam/Create",
                    type: "POST",
                    data: JSON.stringify(requestData),
                    contentType: "application/json",
                    success: function (response) {
                        Swal.fire("Success!", "Exam and questions saved successfully.", "success").then(() => {
                            location.reload();
                        });
                    },
                    error: function () {
                        Swal.fire("Error!", "Failed to save data. Please try again.", "error");
                    }
                });
            }

        $(document).ready(function () {
            $("#gridExamQuestion").data("kendoGrid").bind("dataBound", onDataBound);
            $("#gridUnassignedQuestion").data("kendoGrid").bind("dataBound", onDataBound);
        });


    </script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</body>
</html>