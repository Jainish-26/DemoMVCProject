@model DemoMVC.WebUi.Models.ExamModel
@using Kendo.Mvc.UI
@using DemoMVC.WebUi.Helper
@using DemoMVC.WebUi.Controllers
@using DemoMVC.Models

@{
    ViewBag.Title = Model.ExamId > 0 ? "Edit Exam" : "Create Exam";
    string formCode = AuthorizeFormAccess.FormAccessCode.EXAM.ToString();
    string role = SessionHelper.RoleName;
    var formName = FormUtility.GetFormName(formCode);
    string parentFormname = FormUtility.GetParentFormName(formCode);
    ViewBag.Title = formName;
    BaseController _base = new BaseController();
    bool AllowedEdit = _base.CheckPermission(formCode, AccessPermission.IsEdit);
    bool AllowedAdd = _base.CheckPermission(formCode, AccessPermission.IsAdd);
    bool AllowedDelete = _base.CheckPermission(formCode, AccessPermission.IsDelete);
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewBag.Title</title>

    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />

    <style>
        .form-container {
            width: 100%;
            margin-left: 20px auto;
            padding-left: 25px;
        }

        .form-label {
            font-weight: bold;
        }

        .required-icon {
            color: red;
            margin-left: 5px;
        }

        .small-input {
            width: 100%;
            max-width: 70px;
        }
        
        .same-height {
            height: 38px; 
        }

        .form-control.same-height,
        .form-select.same-height {
            height: 38px !important;
            min-height: 38px !important;
            box-sizing: border-box !important;
        }

        .toggle-input {
            display: none;
        }

        .toggle-switch {
            width: 40px;
            height: 20px;
            border-radius: 10px;
            background: #ccc;
            position: relative;
            cursor: pointer;
        }

            .toggle-switch::before {
                content: '';
                position: absolute;
                width: 18px;
                height: 18px;
                background: white;
                border-radius: 50%;
                top: 50%;
                left: 2px;
                transform: translateY(-50%);
                transition: 0.3s;
            }

        .toggle-input:checked + .toggle-switch {
            background: #28a745;
        }

            .toggle-input:checked + .toggle-switch::before {
                left: 20px;
            }
    </style>
</head>
<body>
    <div>
        <!-- Header Row -->
        <div class="d-flex justify-content-between align-items-center mb-3">
            <h2 class="text m-0 p-3">@ViewBag.Title</h2>
            <div class="d-flex align-items-center m-2">
                <p class="fw-bold mb-1 me-3">Total Selected Marks: <span id="totalMarks">0</span></p>
                <button type="button" onclick="saveExamAndQuestions()" class="btn btn-warning rounded-pill px-4 shadow-sm fw-bold">
                    <i class="fa fa-save"></i> Save
                </button>
                <a href="@Url.Action("Index")" class="btn btn-outline-success rounded-pill px-4 shadow-sm ms-2">
                    <i class="fa fa-arrow-left"></i> Back
                </a>
            </div>
        </div>

        <!-- Form Container -->
        <div class="form-container">
            @Html.Hidden("hdnFormAccessCode", formCode)
            <form id="form" enctype="multipart/form-data">
                @Html.HiddenFor(model => model.ExamId)
                @Html.AntiForgeryToken()

                <div class="row g-2 align-items-end">
                    <div class="col-md-3">
                        <label class="form-label">Exam Name <span class="required-icon">*</span></label>
                        @Html.TextBoxFor(model => model.ExamName, new { @class = "form-control same-height", placeholder = "Enter Exam Name" })
                        @Html.ValidationMessageFor(model => model.ExamName, "", new { @class = "text-danger" })
                    </div>

                    <div class="col-md-2">
                        <label class="form-label">Exam Code <span class="required-icon">*</span></label>
                        @if (Model.ExamId > 0)
                        {
                            @Html.TextBoxFor(model => model.ExamCode, new { @class = "form-control same-height", @readonly = "readonly" })
                        }
                        else
                        {
                            @Html.TextBoxFor(model => model.ExamCode, new { @class = "form-control same-height text-uppercase", placeholder = "Enter Exam Code" })
                        }
                        @Html.ValidationMessageFor(model => model.ExamCode, "", new { @class = "text-danger" })
                    </div>

                    <div class="col-md-1">
                        <label class="form-label">Marks <span class="required-icon">*</span></label>
                        @Html.TextBoxFor(model => model.TotalMarks, new { @class = "form-control small-input same-height", placeholder = "Marks" })
                        @Html.ValidationMessageFor(model => model.TotalMarks, "", new { @class = "text-danger" })
                    </div>

                    <div class="col-md-1">
                        <label class="form-label">Passing <span class="required-icon">*</span></label>
                        @Html.TextBoxFor(model => model.PassingMarks, new { @class = "form-control small-input same-height", placeholder = "Pass" })
                        @Html.ValidationMessageFor(model => model.PassingMarks, "", new { @class = "text-danger" })
                    </div>

                    <div class="col-md-1">
                        <label class="form-label">Duration(mins)<span class="required-icon">*</span></label>
                        @Html.TextBoxFor(model => model.DurationMin, new { @class = "form-control small-input same-height", placeholder = "Time" })
                        @Html.ValidationMessageFor(model => model.DurationMin, "", new { @class = "text-danger" })
                    </div>

                    <div class="col-md-2">
                        <label class="form-label">Status <span class="required-icon">*</span></label>
                        @Html.DropDownListFor(model => model.ExamStatus, Model._statusList, new { @class = "form-select same-height"})
                        @Html.ValidationMessageFor(model => model.ExamStatus, "", new { @class = "text-danger" })
                    </div>

                    <div class="col-md-1 d-flex align-items-center">
                        <label class="me-2">Active?</label>
                        <input type="checkbox" id="IsActiveToggle" class="toggle-input" @if (Model.IsActive) { <text> checked</text> }>
                        <label for="IsActiveToggle" class="toggle-switch"></label>
                        @Html.HiddenFor(model => model.IsActive, new { @id = "IsActive" })
                    </div>
                </div>
            </form>
        </div>

        <div class="common_white_box listingpage m-4">
            <div class="page-loader k-loading-image"></div>
            @(Html.Kendo().Grid<DemoMVC.Models.QuestionGridModel>()
            .Name("gridExamQuestion")
            .AutoBind(true)
            //.Excel(excel => excel
            //  .FileName("FormList.xlsx")
            //  .Filterable(true)
            //  .AllPages(true))
            .Columns(columns =>
            {

                columns.Bound(c => c.QuestionId).Width("7%")
                .ClientTemplate("<input type='checkbox' class='toggle-edit' data-id='#= QuestionId #' />")
                .Title("Selected Question");
                columns.Bound(c => c.Subject).Width("7%").Title("Subject");
                columns.Bound(c => c.Type).Width("7%").Title("Answer Type");
                columns.Bound(c => c.QuestionText).Width("7%").Title("Question")
                .ClientTemplate("<span>#:QuestionText.substring(0, 80) #</span>");
                columns.Bound(c => c.Marks).Width("14%").Title("Marks").ClientTemplate("<input type='number' class='form-control marks-input' value='#=Marks#' data-id='#=QuestionId#' min='1' step='1' />");
                columns.Bound(c => c.QuestionId).HeaderHtmlAttributes(new { @class = "center_text" }).HtmlAttributes(new { @class = "kendogrid_Action center_text" }).ClientTemplate("<div class='k_action_table'>" + (AllowedEdit ? "<a href='javascript:void()' onclick=\"fnShowDetails(#= QuestionId #,'Access')\"><i class='fa fa-eye'></i></a>" : "")).Filterable(false).Title("Action").Width("7%").Sortable(false);
            })
            .NoRecords("No record found")
            .Events(evt => evt
               .DataBinding("fnKendoGridCommonDataBinding")
               .DataBound("fnKendoGridDataBoundEvent")
            )
            .Sortable()
            //.Filterable(filter => filter
            //    .Mode(GridFilterMode.Row)
            //    .Extra(false)
            //    .Operators(o => o.ForString(f => f.Clear().Contains("Contains").DoesNotContain("Does Not Contain").StartsWith("Starts With").EndsWith("Ends With").IsEqualTo("Equal To").IsNotEqualTo("Not Equal To")))
            //    .Operators(o => o.ForNumber(g => g.Clear().IsEqualTo("EqualTo").IsNotEqualTo("Not Equal To").IsGreaterThan("Greater Than").IsGreaterThanOrEqualTo("Greater Than Or Equal To").IsLessThan("Less Than").IsLessThanOrEqualTo("Less Than Or Equal To")))
            //)
            .Pageable(pageable => pageable
                .Refresh(true)
                .PageSizes(new[] {10,20, 50, 100, 200 })
                .ButtonCount(5)
            )
             .DataSource(dataSource => dataSource
                 .Ajax()
                 //.Sort(sortable=>sortable.Add("Name").Ascending())
                 .Read(read => read.Action("GetGridExamQuestionData", "Exam").Data("sendExamId")).PageSize(10)
             )
        )
        </div>
        <div class="common_white_box listingpage m-4">
            <div class="page-loader k-loading-image"></div>
            @(Html.Kendo().Grid<DemoMVC.Models.QuestionGridModel>()
            .Name("gridUnassignedQuestion")
            .AutoBind(true)
            //.Excel(excel => excel
            //  .FileName("FormList.xlsx")
            //  .Filterable(true)
            //  .AllPages(true))
            .Columns(columns =>
            {

                columns.Bound(c => c.QuestionId).Width("7%")
                .ClientTemplate("<input type='checkbox' class='toggle-edit' data-id='#= QuestionId #' />")
                .Title("Select Question");
                columns.Bound(c => c.Subject).Width("7%").Title("Subject");
                columns.Bound(c => c.Type).Width("7%").Title("Answer Type");
                columns.Bound(c => c.QuestionText).Width("7%").Title("Question")
                .ClientTemplate("<span>#:QuestionText.substring(0, 80) #</span>");
                columns.Bound(c => c.Marks).Width("14%").Title("Marks").ClientTemplate("<input type='number' class='form-control marks-input' value='#=Marks#' data-id='#=QuestionId#' min='1' step='1' />");
                columns.Bound(c => c.QuestionId).HeaderHtmlAttributes(new { @class = "center_text" }).HtmlAttributes(new { @class = "kendogrid_Action center_text" }).ClientTemplate("<div class='k_action_table'>" + (AllowedEdit ? "<a href='javascript:void()' onclick=\"fnShowDetails(#= QuestionId #,'Access')\"><i class='fa fa-eye'></i></a>" : "")).Filterable(false).Title("Action").Width("7%").Sortable(false);
            })
            .NoRecords("No record found")
            .Events(evt => evt
                .DataBinding("fnKendoGridCommonDataBinding")
                .DataBound("fnKendoGridDataBoundEvent")
            )
            .Sortable()
            //.Filterable(filter => filter
            //    .Mode(GridFilterMode.Row)
            //    .Extra(false)
            //    .Operators(o => o.ForString(f => f.Clear().Contains("Contains").DoesNotContain("Does Not Contain").StartsWith("Starts With").EndsWith("Ends With").IsEqualTo("Equal To").IsNotEqualTo("Not Equal To")))
            //    .Operators(o => o.ForNumber(g => g.Clear().IsEqualTo("EqualTo").IsNotEqualTo("Not Equal To").IsGreaterThan("Greater Than").IsGreaterThanOrEqualTo("Greater Than Or Equal To").IsLessThan("Less Than").IsLessThanOrEqualTo("Less Than Or Equal To")))
            //)
            .Pageable(pageable => pageable
                .Refresh(true)
                .PageSizes(new[] {10,20, 50, 100, 200 })
                .ButtonCount(5)
            )
                .DataSource(dataSource => dataSource
                    .Ajax()
                    //.Model(
                    //model =>
                    //{
                    //    model.Id(m => m.QuestionId);
                    //    model.Field(m => m.QuestionId).Editable(false);
                    //    model.Field(m => m.Marks).Editable(true);
                    //    model.Field(m => m.QuestionImage).Editable(false);
                    //    model.Field(m => m.QuestionText).Editable(false);
                    //    model.Field(m => m.Subject).Editable(false);
                    //    model.Field(m => m.Type).Editable(false);
                    //})
                    //.Sort(sortable=>sortable.Add("Name").Ascending())
                    .Read(read => read.Action("GetGridUnassignedQuestionData", "Exam").Data("sendExamId")).ServerOperation(false).PageSize(10)
                )
        )
        </div>
    </div>
    <div id="questionModelContainer"></div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        $(document).ready(function () {
            function updateTotalMarks() {
                var totalMarks = 0;

                // Loop through all checked checkboxes and add their corresponding marks
                $('.toggle-edit').each(function () {
                    if ($(this).is(':checked')) {
                        var questionId = $(this).data('id');
                        var marksInput = $('input.marks-input[data-id="' + questionId + '"]');
                        var marks = parseInt(marksInput.val()) || 0;
                        totalMarks += marks;
                    }
                });

                // Update total marks display
                $('#totalMarks').text(totalMarks);
            }

            // Calculate total on page load (for already checked checkboxes)
            setTimeout(updateTotalMarks, 500); // Ensure DOM is fully rendered

            // Event listener for checkbox selection
            $(document).on('change', '.toggle-edit', function () {
                updateTotalMarks();
            });

            // Event listener for marks change
            $(document).on('input', '.marks-input', function () {
                updateTotalMarks();
            });
        });

    </script>
    @*Set ViewBagId For GridData*@
    <script>
    function sendExamId() {
        return {
            examId: '@ViewBag.ExamId'
        };
        }
    </script>
    @*//show Details PopUp*@
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            var toggleInput = document.getElementById("IsActiveToggle");
            var hiddenInput = document.getElementById("IsActive");

            function updateLabel() {
                hiddenInput.value = toggleInput.checked ? "True" : "False";
            }

            toggleInput.addEventListener("change", updateLabel);
            updateLabel(); // Set initial state
        });
         function fnShowDetails(QuestionId,access) {
             $.ajax({
                 url: '@Url.Action("GetQuestionDetails","Question")',
                 type: 'GET',
                 data: { id: QuestionId, access },
                 success: function (response) {
                     $("#questionModelContainer").html(response);
                     $("#questionDetailsModal").modal("show");
                 },
                 error: function () {
                     alert(" Failed To Load Data");
                 }
             });
         }
    </script>
    @*Send Exam And Questions In Controller By AJAX*@
    <script>
        function saveExamAndQuestions() {
         var form = $("#form");

        // Basic validation
        if (!form.valid()) {
            return;
        }

            var formData = $("#form").serializeArray();
            var formObject = {};

            $.each(formData, function (index, field) {
                formObject[field.name] = field.value;
            });

            var totalSelectedMarks = 0;
            var selectedQuestions = [];
            var deselectedQuestions = [];

            function processGrid(gridId) {
                var grid = $("#" + gridId).data("kendoGrid");

                grid.tbody.find("tr").each(function () {
                    var row = $(this);
                    var checkbox = row.find(".toggle-edit");
                    var marksInput = row.find(".marks-input");
                    var dataItem = grid.dataItem(row);

                    var updatedMarks = parseFloat(marksInput.val()) || 0;

                    if (checkbox.is(":checked")) {
                        selectedQuestions.push({
                            QuestionId: dataItem.QuestionId,
                            Marks: updatedMarks
                        });
                        totalSelectedMarks += updatedMarks;
                    } else {
                        if(gridId == "gridExamQuestion"){
                            deselectedQuestions.push(dataItem.QuestionId);
                        }
                    }
                });
            }
            // Process both grids
        processGrid("gridExamQuestion");
        processGrid("gridUnassignedQuestion");


        var examStatus = formObject["ExamStatus"];
        var totalExamMarks = parseFloat(formObject["TotalMarks"]) || 0;

        if (examStatus === "PUBLISHED" && totalSelectedMarks !== totalExamMarks) {
            Swal.fire("Validation Error", "Total selected marks must match the exam total marks!", "warning");
            return;
        }

        var requestData = {
            Exam: formObject,
            SelectedQuestions: selectedQuestions,
            UnselectedQuestions: deselectedQuestions
        };

        if(examStatus == "PUBLISHED"){
            if (selectedQuestions.length === 0) {
                Swal.fire("No Questions Selected!", "Please select questions to save.", "warning");
                return;
            }
        }

        console.log("Final Request Data:", requestData);

        $.ajax({
            url: "/Exam/Create",
            type: "POST",
            data: JSON.stringify(requestData),
            contentType: "application/json",
            success: function (response) {
                Swal.fire("Success!", "Exam and questions saved successfully.", "success").then(() => {
                    location.reload();
                });
            },
            error: function () {
                Swal.fire("Error!", "Failed to save data. Please try again.", "error");
            }
            });
        }

    </script>
    <script>
        $(document).ready(function () {
            $("#gridExamQuestion").data("kendoGrid").bind("dataBound", function () {
                // Select all checkboxes in the grid when data is loaded
                $("#gridExamQuestion").find(".toggle-edit").prop("checked", true);
            });
        });
    </script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</body>
</html>
