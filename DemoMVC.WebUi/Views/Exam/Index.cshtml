@model IEnumerable<DemoMVC.Models.ExamsGridModel>
@using DemoMVC.Models
@using DemoMVC.WebUi.Helper
@using DemoMVC.WebUi.Controllers
@using Kendo.Mvc.UI

@{
    ViewBag.Title = "Index";
    string role = SessionHelper.RoleName;
    string formCode = AuthorizeFormAccess.FormAccessCode.EXAM.ToString();
    var formName = FormUtility.GetFormName(formCode);
    string parentFormname = FormUtility.GetParentFormName(formCode);
    ViewBag.Title = formName;
    BaseController _base = new BaseController();
    bool AllowedEdit = _base.CheckPermission(formCode, AccessPermission.IsEdit);
    bool AllowedAdd = _base.CheckPermission(formCode, AccessPermission.IsAdd);
    bool AllowedView = _base.CheckPermission(formCode, AccessPermission.IsView);
    bool AllowedDelete = _base.CheckPermission(formCode, AccessPermission.IsDelete);

    var test = ViewBag.Test;
}
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css" />
<link href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css" rel="stylesheet">

<style>
    .form-label {
        font-weight: 600;
        color: #2c3e50;
        margin-top: 8px;
        margin-bottom: 8px;
        font-size: 15px;
    }

    .form-select {
        padding: 10px 14px;
        border: 1px solid #dee2e6;
        border-radius: 8px;
        font-size: 15px;
        transition: all 0.3s;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.03);
    }

    .input-group .form-control {
        min-height: 40px;
        border-left: none;
        border-radius: 0 8px 8px 0;
        font-size: 15px;
    }

    .input-group-text {
        background-color: #fff;
        border-right: none;
        border-radius: 8px 0 0 8px;
    }

    #gridSearchBox {
        margin-right: 10px
    }
</style>
<div class="d-flex justify-content-between align-items-center m-3 flex-wrap gap-3">
    <h2 class="fw-bold mx-2">Exams</h2>

    <div class="d-flex align-items-center gap-2">
        <div class="input-group" style="min-width: 250px;">
            <span class="input-group-text bg-white border-end-0">
                <i class="bi bi-search text-muted"></i>
            </span>
            @Html.TextBox("gridSearchBox", null, new
            {
                @class = "form-control border-start-0",
                placeholder = "Search..."
            })
        </div>

        @Html.ActionLink("Create New", "Create", null, new
        {
            @class = "btn btn-warning  mx-2 px-4 shadow-sm fw-bold"
        })
        <button class="btn btn-info mx-2 px-4 shadow-sm fw-bold" onclick="openGenerateTestModal()">Generate Test</button>


    </div>
</div>
<div class="common_white_box listingpage mx-4">
    <div class="page-loader k-loading-image"></div>
    @(Html.Kendo().Grid<DemoMVC.Models.ExamsGridModel>()
            .Name("gridExam")
            .AutoBind(false)
            .Columns(columns =>
            {
                columns.Bound(c => c.ExamName).Width("7%").Title("Exam");
                columns.Bound(c => c.ExamCode).Width("7%").Title("Exam Code");
                columns.Bound(c => c.TotalMarks).Width("7%").Title("Marks");
                columns.Bound(c => c.DurationMin).Width("7%").Title("Duration");
                columns.Bound(c => c.ExamStatus).Width("7%").Title("Status").ClientTemplate("#if(BadgeCode!=null && BadgeCode!=''){#" + "<span class='status' style='background:#=BadgeCode#'>#=ExamStatus#</span>#} else {# #=ExamStatus# #}#");
                if (role == "sadmin")
                {
                    columns.Bound(c => c.ExamId)
                    .HeaderHtmlAttributes(new { @class = "center_text" })
                    .HtmlAttributes(new { @class = "kendogrid_Action center_text" })
                    .ClientTemplate("<div class='k_action_table'>" +
                    (AllowedEdit ? "<a href='javascript:void(0);' title='Edit Details' onclick=\"fnEditExam(#=ExamId#)\"><i class='fa fa-edit'></i></a> " : "") +
                    (AllowedAdd ? "<a href='javascript:void(0);' title='Clone Exam' onclick=\"fnDuplicateExam(#=ExamId#)\"><i class='fa fa-clone'></i></a> " : "") +
                    (AllowedEdit ? "<a href='javascript:void(0);' title='View Details' onclick=\"fnShowDetails(#=ExamId#)\"><i class='fa fa-eye'></i></a>" : "") +
                    "<a href='javascript:void(0);' title='Generate Link' onclick=\"openEmailPopup(#=ExamId#)\"><i class='fa fa-link'></i></a>" +
                    "</div>")
                    .Filterable(false)
                    .Title("Action")
                    .Width("7%")
                    .Sortable(false);
                }
            })
            .NoRecords("No record found")
            .Events(evt => evt
               .DataBinding("fnKendoGridCommonDataBinding")
               .DataBound("fnKendoGridDataBoundEvent")
            )
            .Sortable()
            .Pageable(pageable => pageable
                .Refresh(true)
                .PageSizes(new[] {10,20, 50, 100, 200 })
                .ButtonCount(5)
            )
             .DataSource(dataSource => dataSource
                 .Ajax()
                 //.Sort(sortable=>sortable.Add("Name").Ascending())
                 .Read(read => read.Action("GetGridData", "Exam").Data("getFilterData"))
                 .PageSize(10)
             )
        )
</div>

<style>
    /* Override Bootstrap modal to appear top-right */
    .modal.right-top .modal-dialog {
        position: fixed;
        top: 0;
        right: 0;
        margin: 0;
        height: 100vh;
        width: 1000px; /* Adjust width as needed */
        max-width: 100%;
        transition: transform 0.3s ease-out;
    }

    .modal.right-top .modal-content {
        height: 100vh;
        border-radius: 0;
        border: none;
    }

    /* Optional: make modal body scrollable if content is long */
    .modal.right-top .modal-body {
        overflow-y: auto;
    }
</style>

<!-- Modal -->
<div id="examDetailsModal" class="modal fade right-top" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Question And Answers</h5>
                <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <!-- Partial view content will be loaded here -->
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="emailModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Enter Emails</h5>
            </div>
            <div class="modal-body" id="emailModalBody">
                @Html.Partial("_EmailInputPartial")
            </div>
        </div>
    </div>
</div>
<!-- Modal -->
<div class="modal fade" id="generateTestModal" tabindex="-1" aria-labelledby="generateTestModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content rounded-4">
            <div class="modal-header">
                <h5 class="modal-title" id="generateTestModalLabel">Generate Test</h5>
                <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" id="generateTestModalBody">
                <!-- Partial view will be loaded dynamically here -->
            </div>
        </div>
    </div>
</div>


<script>
    function getFilterData() {
        return {
            searchTerm: $("#gridSearchBox").val()
        };
    }
    $(document).ready(function () {
        $('#gridExam').data('kendoGrid').dataSource.read();
        $('#gridExam').data('kendoGrid').refresh();

        $('#gridSearchBox').on('input', function () {
            $('#gridExam').data('kendoGrid').dataSource.read();
        });
    });
</script>
<script>
    function navigateToViewQuestions(ExamId) {

        window.location.href = '@Url.Action("ViewQuestion", "ExamQuestion")' + '?ExamId=' + ExamId;
    }
    function fnShowDetails(examId) {
        $.ajax({
            url: '/Exam/GetExamQuestionDetails',
            type: 'GET',
            data: { examId: examId },
            success: function (response) {
                $("#examDetailsModal .modal-body").html(response);
                $("#examDetailsModal").modal('show');
            },
            error: function () {
                alert("Error loading exam details.");
            }
        });
    }
    function fnEditExam(examId)
    {
        $.ajax({
            url: '/Exam/CheckUserInExam',
            type: 'GET',
            data: { examId: examId },
            success: function (response) {
                if (response.success) {

                    window.location.href = '/Exam/Create/' + response.examId;
                } else {

                    Swal.fire("Warning", response.message, "warning");
                }
            },
            error: function () {
                Swal.fire("Error", "Something went wrong!", "error");
            }
        });
    }

    function fnDuplicateExam(examId) {
        $.ajax({
            url: '/Exam/CreateDuplicateExam',
            type: 'GET',
            data: { examId: examId },
            success: function (response) {
                if (response.success) {
                    $('#gridExam').data('kendoGrid').dataSource.read();
                    $('#gridExam').data('kendoGrid').refresh();
                    Swal.fire("Success", response.message, "success");
                } else {

                    Swal.fire("Warning", response.message, "warning");
                }
            },
            error: function () {
                Swal.fire("Error", "Something went wrong!", "error");
            }
        });
    }

    function openEmailPopup(examId) {
        var grid = $("#gridExam").data("kendoGrid");
        var dataSource = grid.dataSource.data();

        var dataItem = dataSource.find(item => item.ExamId == examId);

        if (dataItem) {
            var examStatus = dataItem.ExamStatus;

            if (examStatus === "PUBLISHED") {
                $.ajax({
                    url: '/Exam/GetEmailPartial',
                    type: 'GET',
                    data: { ExamId: examId },
                    success: function (response) {
                        $("#emailModalBody").html(response);
                        $("#emailModal").modal("show");
                    },
                    error: function () {
                        Swal.fire("Error", "Failed to load email input form.", "error");
                    }
                });
            } else {
                Swal.fire("Warning!", "You can only add emails for published exams.", "warning");
            }
        } else {
            Swal.fire("Error!", "Exam not found in grid.", "error");
        }
    }
    function generateExamLink(examId) {
        $.ajax({
            url: '/UserExam/GenerateExamLink',
            type: 'GET',
            data: { ExamId: examId },
            success: function (response) {
                console.log(response);
                if (response.success) {
                    Swal.fire({
                        title: 'Exam Link Generated',
                        html: `<a href="${response.link}" target="_blank">${response.link}</a>`,
                        icon: 'success'
                    });
                } else {
                    Swal.fire("Error", "Failed to generate link.", "error");
                }
            },
            error: function () {
                Swal.fire("Error", "Something went wrong.", "error");
            }
        });
    }
    function openGenerateTestModal() {
        $.ajax({
            url: '@Url.Action("GeneratePracticeTest", "Exam")',
            type: 'GET',
            success: function (response) {
                // Load the partial view into the modal body
                $('#generateTestModalBody').html(response);
                $('#generateTestModal').modal('show');
            },
            error: function () {
                alert("Error loading the form.");
            }
        });
    }
    $(document).on('submit', '#generateTestForm', function (e) {
        e.preventDefault();

        var form = $(this);

        if (!form.valid()) {
            return;
        }

        $.ajax({
            url: form.attr('action'),
            method: 'POST',
            data: form.serialize(),
            success: function (response) {
                if (response.success) {
                    $('#generateTestModal').modal('hide');

                    Swal.fire({
                        icon: 'success',
                        title: 'Test Generated Successfully!',
                        text: response.message || "Test generated successfully!"
                    });

                    $('#gridExam').data('kendoGrid').dataSource.read();
                }
                else if (!response.success && response.message) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error!',
                        text: response.message || "Something went wrong, please try again."
                    });
                }
                else if (response.errors) {
                    // Clear previous errors
                    $('.field-validation-error').text('');
                    $('.text-danger').text('');

                    // Show new errors
                    $.each(response.errors, function (key, messages) {
                        var errorMsg = messages[0];
                        var errorSpan = $('[data-valmsg-for="' + key + '"]');
                        errorSpan.text(errorMsg);
                        errorSpan.addClass('text-danger');
                    });
                }
            },
            error: function () {
                alert("Something went wrong.");
            }
        });
    });

    // ✅ Live clearing of field-specific error messages
    $(document).on('input change', '#generateTestForm input, #generateTestForm select, #generateTestForm textarea', function () {
        var fieldName = $(this).attr('name');
        var errorSpan = $('[data-valmsg-for="' + fieldName + '"]');

        // Optional: Only remove error if value is not empty (adjust this based on need)
        if ($(this).val()) {
            errorSpan.text('');
            errorSpan.removeClass('text-danger');
        }
    });

</script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.6.2/js/bootstrap.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.3/jquery.validate.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate-unobtrusive/4.0.0/jquery.validate.unobtrusive.min.js"></script>
