@model IEnumerable<DemoMVC.Models.UserExamGrid>
@using DemoMVC.Models
@using DemoMVC.WebUi.Helper
@using DemoMVC.WebUi.Controllers
@using Kendo.Mvc.UI

@{
    ViewBag.Title = "Index";
    string role = SessionHelper.RoleName;
    string formCode = AuthorizeFormAccess.FormAccessCode.USEREXAM.ToString();
    var formName = FormUtility.GetFormName(formCode);
    string parentFormname = FormUtility.GetParentFormName(formCode);
    ViewBag.Title = formName;
    BaseController _base = new BaseController();
    bool AllowedEdit = _base.CheckPermission(formCode, AccessPermission.IsEdit);
    bool AllowedAdd = _base.CheckPermission(formCode, AccessPermission.IsAdd);
    bool AllowedDelete = _base.CheckPermission(formCode, AccessPermission.IsDelete);
}
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css" />
<style>
    .form-label {
        font-weight: 600;
        color: #2c3e50;
        margin-top: 8px;
        margin-bottom: 8px;
        font-size: 15px;
    }

    .form-select {
        padding: 10px 14px;
        border: 1px solid #dee2e6;
        border-radius: 8px;
        font-size: 15px;
        transition: all 0.3s;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.03);
    }

    .input-group .form-control {
        min-height: 40px;
        border-left: none;
        border-radius: 0 8px 8px 0;
        font-size: 15px;
    }

    .input-group-text {
        background-color: #fff;
        border-right: none;
        border-radius: 8px 0 0 8px;
    }

    #gridSearchBox {
        margin-right: 10px
    }
</style>
<div class="d-flex justify-content-between align-items-center m-3 flex-wrap gap-3">
    <h2 class="fw-bold m-0">Participants</h2>

    <div class="d-flex align-items-center gap-2">
        <div class="input-group" style="min-width: 250px;">
            <span class="input-group-text bg-white border-end-0">
                <i class="bi bi-search text-muted"></i>
            </span>
            @Html.TextBox("gridSearchBox", null, new
            {
                @class = "form-control border-start-0",
                placeholder = "Search..."
            })
        </div>
    </div>
</div>
<div class="common_white_box listingpage mx-4">
    <div class="page-loader k-loading-image"></div>
    @(Html.Kendo().Grid<DemoMVC.Models.UserExamGrid>()
            .Name("gridUserExam")
            .AutoBind(true)
            .Columns(columns =>
            {
                columns.Bound(c => c.Email).Width("7%").Title("Email");
                columns.Bound(c => c.ExamName).Width("7%").Title("Exam");
                columns.Bound(c => c.UserToken).Width("7%").Title("Token");
                columns.Bound(c => c.ExamStatus).Width("7%").Title("Status").ClientTemplate("#if(ExamBadgeCode!=null && ExamBadgeCode!=''){#" + "<span class='status' style='background:#=ExamBadgeCode#'>#=ExamStatus#</span>#} else {# #=ExamStatus# #}#");
                columns.Bound(c => c.Result).Width("7%").Title("Result");
                columns.Bound(c => c.ResultStatus).Width("7%").Title("Result Status").ClientTemplate("#if(ResultBadgeCode!=null && ResultBadgeCode!=''){#" + "<span class='status' style='background:#=ResultBadgeCode#'>#=ResultStatus#</span>#}#");
                if (role == "sadmin")
                {
                    columns.Bound(c => c.UserExamId)
                    .HeaderHtmlAttributes(new { @class = "center_text" })
                    .HtmlAttributes(new { @class = "kendogrid_Action center_text" })
                    .ClientTemplate("<div class='k_action_table'>" +
                    (AllowedEdit ? "<a href='javascript:void(0);' title='Copy Link' onclick=\"copyLink(#=UserExamId#)\"><i class='fa fa-copy'></i></a>" : "") +
                    "<a href='javascript:void(0);' title='Generate Link' onclick=\"generateLink(#=UserExamId#)\"><i class='fa fa-link'></i></a> " +
                    "<a href='javascript:void(0);' title='Check Exam' onclick=\"checkExam(#=UserExamId#)\"><i class='fa fa-check-circle'></i></a>" +
                    "</div>")
                    .Filterable(false)
                    .Title("Action")
                    .Width("7%")
                    .Sortable(false);
                }
                else
                {

                }
            })
            .NoRecords("No record found")
            .Events(evt => evt
               .DataBinding("fnKendoGridCommonDataBinding")
               .DataBound("fnKendoGridDataBoundEvent")
            )
            .Sortable()
            .Pageable(pageable => pageable
                .Refresh(true)
                .PageSizes(new[] {10,20, 50, 100, 200 })
                .ButtonCount(5)
            )
             .DataSource(dataSource => dataSource
                 .Ajax()
                 //.Sort(sortable=>sortable.Add("Name").Ascending())
                 .Read(read => read.Action("GetGridData", "UserExam").Data("getFilterData"))
                 .PageSize(10)
             )
        )
</div>
<script>
    function getFilterData() {
        return {
            searchTerm: $("#gridSearchBox").val()
        };
    }
    $(document).ready(function () {
        $('#gridSearchBox').on('input', function () {
            $('#gridUserExam').data('kendoGrid').dataSource.read();
        });
    })
    function copyLink(UserExamId) {
        var grid = $("#gridUserExam").data("kendoGrid");
        var dataSource = grid.dataSource.data();

        var dataItem = dataSource.find(item => item.UserExamId == UserExamId);
        var userToken = dataItem.UserToken;
        if (userToken != null) {
            var baseUrl = window.location.origin;
            var generatedLink = baseUrl + "/UserExam/UserExamLogIn?userToken=" + encodeURIComponent(userToken);

            navigator.clipboard.writeText(generatedLink).then(() => {
                toastr.success("The link has been copied to your clipboard.");
            }).catch(err => {
                toastr.error("Failed to copy the link.");
            });
        } else {
            Swal.fire("Error!", "User Token Not Found", "error");
        }
    }
    function generateLink(UserExamId) {
        $.ajax({
            url: '/UserExam/UserExamLink', // Your endpoint
            type: 'POST',
            data: { userExamId: UserExamId },
            success: function (response) {
                if (response.success) {
                    let generatedLink = response.link;
                    Swal.fire({
                        title: "Are You Sure Want To Send Link",
                        icon: "success",
                        showCancelButton: true,
                        confirmButtonText: "Send Email",
                        cancelButtonText: "Close"
                    }).then((result) => {
                        if (result.isConfirmed) {
                            sendEmail(UserExamId, generatedLink);
                        }
                    });
                } else {
                    Swal.fire("Error!", response.message, "error");
                }
            },
            error: function () {
                Swal.fire("Error!", "Something went wrong.", "error");
            }
        });
    }

    function sendEmail(userExamId, generatedLink) {
        $.ajax({
            url: '/SendMail/SendExamEmail',
            type: 'POST',
            data: { userExamId: userExamId, generatedLink: generatedLink },
            success: function (response) {
                if (response.success) {
                    Swal.fire("Success!", "Exam link sent to the candidate's email.", "success");
                } else {
                    Swal.fire("Error!", response.message, "error");
                }
            },
            error: function () {
                Swal.fire("Error!", "Failed to send email.", "error");
            }
        });
    }

    function checkExam(userExamId) {
        var grid = $("#gridUserExam").data("kendoGrid");
        var dataSource = grid.dataSource.data();

        var dataItem = dataSource.find(item => item.UserExamId == userExamId);
        if (dataItem) {
            var examStatus = dataItem.ExamStatus;

            if (examStatus === "COMPLETED") {

                window.location.href = '/UserExamCheck/CheckExam?userExamId=' + userExamId;
            } else {
                Swal.fire("Warning!", "Wait For Candidate To Give Exam", "warning");
            }
        }
    }

</script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<!-- Toastr CSS -->
<link href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css" rel="stylesheet">
<!-- Toastr JS -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
