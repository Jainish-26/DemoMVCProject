@model DemoMVC.WebUi.Models.ExamQuestionViewModel

@{
    ViewBag.Title = "Exam Questions";
    int totalQuestions = Model.Questions.Count;
    Layout = null;
    int durationMin = Model.Exam.DurationMin;
    int viewBagUserExamId = ViewBag.UserExamId;
}

<style>
    body {
        font-family: Arial, sans-serif;
        background-color: #f4f4f4;
        padding: 10px;
    }

    .exam-header {
        position: sticky;
        top: 0;
        background: #fff;
        /*        padding: 20px;*/
        border-bottom: 3px solid #ddd;
        z-index: 1000;
        display: flex;
        justify-content: space-around;
        align-items: center;
        font-size: 18px;
        font-weight: bold;
        box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
        text-align: center;
        flex-wrap: wrap;
    }

    .question-container {
        margin-top: 20px;
        padding: 25px;
        background: #fff;
        border-radius: 8px;
        box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
        position: relative;
        min-height: 550px;
    }

    .question-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        font-size: 20px;
        font-weight: bold;
        padding-bottom: 10px;
    }

    .question-marks {
        font-size: 18px;
        font-weight: bold;
    }

    h3 {
        font-size: 20px;
        font-weight: bold;
    }

    .text-answer-box textarea {
        width: 100%;
        min-height: 120px;
        resize: vertical;
        padding: 10px;
        font-size: 16px;
        border-radius: 5px;
        border: 1px solid #ccc;
    }

    .question-page {
        display: none;
    }

        .question-page.active {
            display: block;
        }

    .answer-item {
        padding: 10px;
        font-size: 18px;
    }

    img {
        max-width: 400px;
        display: block;
        margin: 10px auto;
        border-radius: 10px;
        box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.2);
    }

    .navigation-buttons {
        position: absolute;
        bottom: 15px;
        left: 0;
        right: 0;
        display: flex;
        justify-content: space-between;
        padding: 10px 25px;
        background: #fff;
    }

    .btn-custom {
        padding: 10px 20px;
        font-size: 18px;
        font-weight: bold;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition: 0.3s;
    }

    .btn-prev {
        background-color: #6c757d;
    }

    .btn-next {
        background-color: #007bff;
    }

    .btn-prev:hover {
        background-color: #5a6268;
    }

    .btn-next:hover {
        background-color: #0056b3;
    }

    .btn-prev:disabled, .btn-next:disabled {
        background-color: #ccc;
        cursor: not-allowed;
    }
</style>


<div class="exam-header">
    <div><h2>@Model.Exam.ExamName</h2></div>
    <div><p><strong>Exam Code:</strong> @Model.Exam.ExamCode</p></div>
    <div><p><strong>Total Marks:</strong> @Model.Exam.TotalMarks</p></div>
    <div><p><strong>Passing Marks:</strong> @Model.Exam.PassingMarks</p></div>
    <div><p><strong>Time Left:</strong> <span id="time" style=" color:red">@Model.Exam.DurationMin</span></p></div>
</div>


<div class="question-container">
    @for (int i = 0; i < totalQuestions; i++)
    {
        var question = Model.Questions[i];

        <div class="question-page @(i == 0 ? "active" : "")" id="question-@i" data-question-id="@question.QuestionId">
            <div class="question-header">
                <h3>Q@(i + 1): @question.QuestionText</h3>
                <span class="question-marks">Marks: @question.Marks</span>
            </div>

            @if (!string.IsNullOrEmpty(question.QuestionImage))
            {
                <div class="mb-2">
                    <img src="~/content/QuestionImage/@question.QuestionImage" alt="Question Image">
                </div>
            }

            @if (question.QuestionType == "Single Choice MCQ")
            {
                foreach (var answer in question.Answers)
                {
                    <div class="answer-item">
                        <div class="d-flex align-items-center">
                            <input type="radio" name="selectedAnswer_@i" value="@answer.AnswerText" class="form-check-input">
                            <span class="answer-text">@answer.AnswerText</span>
                        </div>
                    </div>
                }
            }
            else if (question.QuestionType == "Multiple Choice MCQ")
            {
                foreach (var answer in question.Answers)
                {
                    <div class="answer-item">
                        <div class="d-flex align-items-center">
                            <input type="checkbox" name="selectedAnswers_@i" value="@answer.AnswerText" class="form-check-input">
                            <span class="answer-text">@answer.AnswerText</span>
                        </div>
                    </div>
                }
            }
            else if (question.QuestionType == "Text Answer" || question.QuestionType == "SQL Query")
            {
                <div class="text-answer-box">
                    <textarea class="form-control" name="textAnswer_@i" rows="4" placeholder="Type your answer here..."></textarea>
                </div>
            }
            else
            {
                <p class="text-muted">Invalid Question Type</p>
            }
        </div>
    }


    <div class="navigation-buttons">
        <button class="btn-custom btn-prev" onclick="showQuestion(-1)" disabled>Previous</button>
        <button class="btn-custom btn-next" onclick="showQuestion(1)">Next</button>
    </div>
</div>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>
let currentIndex = 0;
let totalQuestions = @totalQuestions;
let userExamId = @viewBagUserExamId;
let isNavigating = false; // Prevents double-click issue

    function getSelectedAnswer(questionIndex) {
        let selectedAnswers = [];
        let questionContainer = document.querySelector(`#question-${questionIndex}`);
        if (!questionContainer) return selectedAnswers;

        questionContainer.querySelectorAll(`input[name="selectedAnswers_${questionIndex}"]:checked,
                                            input[name="selectedAnswer_${questionIndex}"]:checked`)
                         .forEach(el => selectedAnswers.push(el.value));

        let textArea = questionContainer.querySelector(`textarea[name="textAnswer_${questionIndex}"]`);
        if (textArea && textArea.value.trim()) selectedAnswers.push(textArea.value.trim());

        return selectedAnswers;
    }

function storeUserAnswer(questionId, questionIndex, callback) {
    let selectedAnswers = getSelectedAnswer(questionIndex);

    if (selectedAnswers.length === 0) {
        return callback && callback(false);
    }

    $.ajax({
        url: '@Url.Action("StoreUserAnswer", "UserAnswer")',
        type: 'POST',
        contentType: "application/json",
        data: JSON.stringify({ UserExamId: userExamId, QuestionId: parseInt(questionId), Answer: selectedAnswers }),
        success: function () {
            if (callback) callback(true);
        },
        error: function () {
            if (callback) callback(false);
        }
    });
}

function prefillUserAnswer(questionIndex, storedAnswers) {
    let questionContainer = document.querySelector(`#question-${questionIndex}`);
    if (!questionContainer) return;

    questionContainer.querySelectorAll(`input[name="selectedAnswers_${questionIndex}"],
                                        input[name="selectedAnswer_${questionIndex}"]`)
                     .forEach(el => el.checked = storedAnswers.includes(el.value));

    let textArea = questionContainer.querySelector(`textarea[name="textAnswer_${questionIndex}"]`);
    if (textArea) textArea.value = storedAnswers.length > 0 ? storedAnswers[0] : "";
}

function getUserAnswer(questionId, questionIndex, callback) {
    // Show loader on both buttons
    $(".btn-next").prop("disabled", true).html('<span class="spinner-border spinner-border-sm"></span> Loading...');
    $(".btn-prev").prop("disabled", true).html('<span class="spinner-border spinner-border-sm"></span> Loading...');

    $.ajax({
        url: '@Url.Action("GetUserAnswer", "UserAnswer")',
        type: 'GET',
        data: { UserExamId: userExamId, QuestionId: questionId },
        success: function (response) {
            if (response.success && Array.isArray(response.answer)) {
                prefillUserAnswer(questionIndex, response.answer);
            }

            // Reset buttons after loading
            $(".btn-next").prop("disabled", false).html("Next");
            $(".btn-prev").prop("disabled", false).html("Previous");

            if (callback) callback(response.success);
        },
        error: function () {
            $(".btn-next").prop("disabled", false).html("Next");
            $(".btn-prev").prop("disabled", false).html("Previous");
            if (callback) callback(false);
        }
    });
}

function switchQuestion(newIndex) {
    isNavigating = true;

    document.querySelectorAll('.question-page').forEach((el, i) => el.classList.toggle('active', i === newIndex));
    currentIndex = newIndex;

    let questionElement = document.querySelector(`#question-${currentIndex}`);
    if (questionElement) {
        getUserAnswer(questionElement.getAttribute("data-question-id"), currentIndex, () => {
            isNavigating = false;
        });
    }

    $(".btn-prev").prop("disabled", currentIndex === 0);
    $(".btn-next").prop("disabled", currentIndex === totalQuestions - 1);
}

function showQuestion(change) {
    if (isNavigating) return;

    let newIndex = currentIndex + change;
    if (newIndex < 0 || newIndex >= totalQuestions) return;

    let questionElement = document.querySelector(`#question-${currentIndex}`);

    // Show loader and disable both buttons
    $(".btn-next").prop("disabled", true).html('<span class="spinner-border spinner-border-sm"></span> Loading...');
    $(".btn-prev").prop("disabled", true).html('<span class="spinner-border spinner-border-sm"></span> Loading...');

    storeUserAnswer(questionElement.getAttribute("data-question-id"), currentIndex, () => {
        switchQuestion(newIndex);
    });
}

$(document).ready(function () {
    let firstQuestion = document.querySelector(`#question-0`);
    if (firstQuestion) {
        getUserAnswer(firstQuestion.getAttribute("data-question-id"), 0);
    }

    $(".btn-next").on("click", function () {
        showQuestion(1);
    });

    $(".btn-prev").on("click", function () {
        showQuestion(-1);
    });
});
</script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
