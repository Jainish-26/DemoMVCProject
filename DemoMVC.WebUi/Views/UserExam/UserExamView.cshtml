@model DemoMVC.WebUi.Models.ExamQuestionViewModel

@{
    ViewBag.Title = "Exam Questions";
    int totalQuestions = Model.Questions.Count;
    Layout = null;
    int durationMin = Model.Exam.DurationMin;
    int viewBagUserExamId = ViewBag.UserExamId;
}

<style>
    body {
        font-family: Arial, sans-serif;
        background-color: #f4f4f4;
        padding: 10px;
    }

    .exam-header {
        position: sticky;
        top: 0;
        background: #fff;
        /*        padding: 20px;*/
        border-bottom: 3px solid #ddd;
        z-index: 1000;
        display: flex;
        justify-content: space-around;
        align-items: center;
        font-size: 18px;
        font-weight: bold;
        box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
        text-align: center;
        flex-wrap: wrap;
    }

    .exam-container {
        display: flex;
        width: 100%;
        gap: 15px;
    }

    /* Left Section: Question Container (80%) */
    .question-section {
        width: 80%;
    }

    /* Right Section: Question Palette (20%) */
    .question-palette {
        width: 20%;
        padding: 15px;
        margin-top: 20px;
        background: #f8f9fa;
        border-radius: 8px;
        box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
        height: fit-content;
        min-height: 570px;
    }

        /* Palette Heading */
        .question-palette h4 {
            font-size: 18px;
            font-weight: bold;
            margin-bottom: 10px;
        }

    /* Palette Buttons */
    #palette-buttons {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
    }

    .palette-btn {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        border: none;
        font-weight: bold;
        margin: 5px;
        cursor: pointer;
        transition: 0.3s;
        box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.2);
    }

    /* Status Colors */
    .not-visited {
        background-color: gray;
        color: white;
    }

    .current {
        background-color: blue;
        color: white;
    }

    .visited {
        background-color: yellow;
    }

    .answered {
        background-color: green;
        color: white;
    }
    ..color-legend {
        display: flex;
        flex-direction: column;
        align-items: flex-start; /* Align to the left */
        font-size: 14px;
        margin-left: 10px; /* Optional: Adjust for better spacing */
    }

    .legend-box {
        display: inline-block;
        width: 15px;
        height: 15px;
        margin-right: 10px;
        border-radius: 3px;
    }

    .yellow {
        background-color: yellow;
    }

    .blue {
        background-color: blue;
    }

    .green {
        background-color: green;
    }

    .gray {
        background-color: gray;
    }


    /* Existing Styles - Keeping Your Question Container UI */
    .question-container {
        margin-top: 20px;
        padding: 25px;
        background: #fff;
        border-radius: 8px;
        box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
        position: relative;
        min-height: 550px;
    }

    .question-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        font-size: 20px;
        font-weight: bold;
        padding-bottom: 10px;
    }

    .question-marks {
        font-size: 18px;
        font-weight: bold;
    }

    h3 {
        font-size: 20px;
        font-weight: bold;
    }

    .text-answer-box textarea {
        width: 100%;
        min-height: 120px;
        resize: vertical;
        padding: 10px;
        font-size: 16px;
        border-radius: 5px;
        border: 1px solid #ccc;
    }

    .question-page {
        display: none;
    }

        .question-page.active {
            display: block;
        }

    .answer-item {
        padding: 10px;
        font-size: 18px;
    }

    img {
        max-width: 400px;
        display: block;
        margin: 10px auto;
        border-radius: 10px;
        box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.2);
    }

    /* Navigation Buttons */
    .navigation-buttons {
        position: absolute;
        bottom: 15px;
        left: 0;
        right: 0;
        display: flex;
        justify-content: space-between;
        padding: 10px 25px;
        background: #fff;
    }

    .btn-custom {
        padding: 10px 20px;
        font-size: 18px;
        font-weight: bold;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition: 0.3s;
    }

    .btn-prev {
        background-color: #6c757d;
    }

    .btn-next {
        background-color: #007bff;
    }

    .btn-save {
        background-color: seagreen;
    }

    .btn-prev:hover {
        background-color: #5a6268;
    }

    .btn-next:hover {
        background-color: #0056b3;
    }

    .btn-save:hover {
        background-color: forestgreen;
    }

    .btn-prev:disabled, .btn-next:disabled {
        background-color: #ccc;
        cursor: not-allowed;
    }

    /*Pop Up*/
    .modal {
        display: none;
        position: fixed;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        justify-content: center;
        align-items: center;
    }

    .modal-content {
        background: white;
        padding: 20px;
        border-radius: 8px;
        text-align: center;
        width: 350px;
    }

    .confirm-btn {
        background-color: green;
        color: white;
        padding: 10px;
        border: none;
        cursor: pointer;
        margin-right: 10px;
    }

    .cancel-btn {
        background-color: red;
        color: white;
        padding: 10px;
        border: none;
        cursor: pointer;
    }

</style>


<div class="exam-header">
    <div><h2>@Model.Exam.ExamName</h2></div>
    <div><p><strong>Exam Code:</strong> @Model.Exam.ExamCode</p></div>
    <div><p><strong>Total Marks:</strong> @Model.Exam.TotalMarks</p></div>
    <div><p><strong>Passing Marks:</strong> @Model.Exam.PassingMarks</p></div>
    <div><p><strong>Time Left:</strong> <span id="time" style=" color:red">@Model.Exam.DurationMin</span></p></div>
</div>


<div class="exam-container">
    <!-- Left: Questions (80%) -->
    <div class="question-section">
        <div class="question-container">
            @for (int i = 0; i < totalQuestions; i++)
            {
                var question = Model.Questions[i];

                <div class="question-page @(i == 0 ? "active" : "")" id="question-@i" data-question-id="@question.QuestionId">
                    <div class="question-header">
                        <h3>Q@(i + 1): @question.QuestionText</h3>
                        <span class="question-marks">Marks: @question.Marks</span>
                    </div>

                    @if (!string.IsNullOrEmpty(question.QuestionImage))
                    {
                        <div class="mb-2">
                            <img src="~/content/QuestionImage/@question.QuestionImage" alt="Question Image">
                        </div>
                    }

                    @if (question.QuestionType == "Single Choice MCQ")
                    {
                        foreach (var answer in question.Answers)
                        {
                            <div class="answer-item">
                                <div class="d-flex align-items-center">
                                    <input type="radio" name="selectedAnswer_@i" value="@answer.AnswerText" class="form-check-input">
                                    <span class="answer-text">@answer.AnswerText</span>
                                </div>
                            </div>
                        }
                    }
                    else if (question.QuestionType == "Multiple Choice MCQ")
                    {
                        foreach (var answer in question.Answers)
                        {
                            <div class="answer-item">
                                <div class="d-flex align-items-center">
                                    <input type="checkbox" name="selectedAnswers_@i" value="@answer.AnswerText" class="form-check-input">
                                    <span class="answer-text">@answer.AnswerText</span>
                                </div>
                            </div>
                        }
                    }
                    else if (question.QuestionType == "Text Answer" || question.QuestionType == "SQL Query")
                    {
                        <div class="text-answer-box">
                            <textarea class="form-control" name="textAnswer_@i" rows="4" placeholder="Type your answer here..."></textarea>
                        </div>
                    }
                    else
                    {
                        <p class="text-muted">Invalid Question Type</p>
                    }
                </div>
            }

            <div class="navigation-buttons">
                <button class="btn-custom btn-prev"  disabled>Previous</button>
                <button class="btn-custom btn-save" id="btn-save" onclick="showSavePopup()">Save</button>
                <button class="btn-custom btn-next" >Next</button>
            </div>
        </div>
    </div>

    <!-- Right: Question Palette (20%) -->
    <div class="question-palette">
        <div class="color-legend">
            <p><span class="legend-box yellow"></span> Visited Question</p>
            <p><span class="legend-box blue"></span> Current Question</p>
            <p><span class="legend-box green"></span> Answered Question</p>
            <p><span class="legend-box gray"></span> Not Visited Question</p>
        </div>
        <div class="palette-buttons">
            @for (int i = 0; i < totalQuestions; i++)
            {
                <button class="palette-btn not-visited" data-index="@i" id="palette-@i">@(@i + 1)</button>
            }
        </div>
    </div>
</div>
<div id="saveExamModal" class="modal">
    <div class="modal-content">
        <h2>Confirm Exam Submission</h2>
        <p>You are about to submit your exam.</p>
        <p><strong>Total Questions:</strong> <span id="total-questions"></span></p>
        <p><strong>Answered Questions:</strong> <span id="answered-questions"></span></p>
        <p><strong>Unanswered Questions:</strong> <span id="unanswered-questions"></span></p>

        <button onclick="confirmExamSubmission()" class="confirm-btn">Submit Exam</button>
        <button onclick="closeSavePopup()" class="cancel-btn">Cancel</button>
    </div>
</div>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>
let userExamId = @viewBagUserExamId;
let totalQuestions = @totalQuestions;
let currentQuestionIndex = 0;
let answersData = {};
let visitedCount = 0;
    let remainingMinutes = 0;
    let remainingSeconds = 0;
    let timerInterval;

document.addEventListener("DOMContentLoaded", function () {
    document.querySelectorAll(".question-page")[0].style.display = "block";

    getRemainingTimeFromServer();

    loadAnswersFromDatabase();

    document.querySelectorAll(".palette-btn").forEach((btn) => {
        btn.addEventListener("click", function () {
            let questionIndex = parseInt(this.getAttribute("data-index"));
            saveAndChangeQuestion(questionIndex);
        });
    });

    document.querySelector(".btn-next").addEventListener("click", function () {
        saveAndChangeQuestion(currentQuestionIndex + 1);
    });

    document.querySelector(".btn-prev").addEventListener("click", function () {
        saveAndChangeQuestion(currentQuestionIndex - 1);
    });

    document.querySelectorAll(".question-page").forEach((page) => {
        page.addEventListener("input", function () {
            let questionId = page.getAttribute("data-question-id");
            let answer = getCurrentAnswer(page);

            answersData[questionId] = { AnswerText: answer, IsVisited: true };
            updateQuestionPalette();
        });
    });
});


function loadAnswersFromDatabase() {
    $.ajax({
        url: '/UserAnswer/GetAllAnswers',
        type: 'GET',
        data: { userExamId: userExamId },
        success: function (response) {
            if (response.success && response.data) {
                answersData = {};
                response.data.forEach(ans => {
                    answersData[ans.QuestionId] = {
                        AnswerText: ans.AnswerText || "",
                        IsVisited: ans.IsVisited || false
                    };
                });
            } 
            applyPrefilledAnswers();
            updateQuestionPalette();
        },
        error: function (xhr) {
            console.error("❌ Error loading answers:", xhr.responseText);
        }
    });
}


function applyPrefilledAnswers() {
    document.querySelectorAll(".question-page").forEach((page) => {
        let questionId = page.getAttribute("data-question-id");
        let answerData = answersData[questionId];
        if (answerData && answerData.IsVisited) {
            visitedCount++;
        }
        if (answerData) {
            let answer = answerData.AnswerText || "";

            if (page.querySelector("input[type='radio']")) {
                let radio = page.querySelector(`input[type='radio'][value='${answer}']`);
                if (radio) radio.checked = true;
            }

            else if (page.querySelector("input[type='checkbox']")) {
                answer.split(",").forEach(val => {
                    let trimmedValue = val.trim();
                    page.querySelectorAll("input[type='checkbox']").forEach(checkbox => {
                        if (checkbox.value === trimmedValue) {
                            checkbox.checked = true;
                        }
                    });
                });
            }

            else if (page.querySelector("textarea")) {
                page.querySelector("textarea").value = answer;
            }
        }
    });
    checkAllQuestionsVisited();
}

function updateQuestionPalette() {

    document.querySelectorAll(".palette-btn").forEach((btn, index) => {
        let questionPage = document.querySelectorAll(".question-page")[index];
        let questionId = questionPage.getAttribute("data-question-id");
        let answerData = answersData[questionId] || {};
        let status = "not-visited"; 

        if (answerData.AnswerText) {
            status = "answered";
        } else if (answerData.IsVisited) {
            status = "visited";
        }

        btn.classList.remove("not-visited", "visited", "answered", "current");

        if (index === currentQuestionIndex) {
            btn.classList.add("current");
            btn.style.background = "blue";
        } else if (status === "answered") {
            btn.classList.add("answered");
            btn.style.background = "green";
        } else if (status === "visited") {
            btn.classList.add("visited");
            btn.style.background = "yellow";
        } else {
            btn.classList.add("not-visited");
            btn.style.background = "gray";
        }
    });
}

    function saveAndChangeQuestion(newIndex, callback = null) {
        if (newIndex < 0 || newIndex >= totalQuestions) return;

        let currentPage = document.querySelectorAll(".question-page")[currentQuestionIndex];
        let questionId = currentPage.getAttribute("data-question-id");
        let answer = getCurrentAnswer(currentPage);

        let userAnswerModel = {
            UserExamId: userExamId,
            QuestionId: questionId,
            AnswerText: answer,
            IsVisited: true
        };

        $.ajax({
            url: '/UserAnswer/SaveUserAnswer',
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify(userAnswerModel),
            success: function () {
                
                    visitedCount++;
                    console.log(`🔄 Visited count updated: ${visitedCount}/${totalQuestions}`);
                
                answersData[questionId] = { AnswerText: answer, IsVisited: true };
                checkAllQuestionsVisited();
                if (typeof callback === "function") {
                    callback();
                } else {
                    changeQuestion(newIndex);
                }
            },
            error: function (xhr) {
                console.error("❌ Error saving answer:", xhr.responseJSON?.error || xhr.responseText);
            }
        });
    }


function getCurrentAnswer(page) {
    let answer = "";

    if (page.querySelector("input[type='radio']:checked")) {
        answer = page.querySelector("input[type='radio']:checked").value;
    } else if (page.querySelectorAll("input[type='checkbox']:checked").length > 0) {
        let selectedCheckboxes = page.querySelectorAll("input[type='checkbox']:checked");
        answer = Array.from(selectedCheckboxes).map(cb => cb.value).join(",");
    } else if (page.querySelector("textarea")) {
        answer = page.querySelector("textarea").value;
    }

    return answer;
}

// ✅ Change question
function changeQuestion(index) {
    if (index < 0 || index >= totalQuestions) return;

    document.querySelectorAll(".question-page")[currentQuestionIndex].style.display = "none";
    document.querySelectorAll(".question-page")[index].style.display = "block";
    currentQuestionIndex = index;

    document.querySelector(".btn-prev").disabled = currentQuestionIndex === 0;
    document.querySelector(".btn-next").disabled = currentQuestionIndex === totalQuestions - 1;

    updateQuestionPalette();
}

    function checkAllQuestionsVisited() {
        let saveButton = document.querySelector(".btn-save");

        if (visitedCount >= totalQuestions - 1) {
            saveButton.style.display = "block"; // ✅ Show button
            console.log("✅ All questions visited. Showing Save button.");
        } else {
            saveButton.style.display = "none"; // ❌ Hide button
            console.log(`❌ ${totalQuestions - visitedCount} questions left. Hiding Save button.`);
        }
    }
    function showSavePopup() {
        let answeredCount = document.querySelectorAll(".answered").length + 1;

        Swal.fire({
            title: "Confirm Exam Submission",
            html: `
            <p><strong>Total Questions:</strong> ${totalQuestions}</p>
            <p><strong>Attempted Questions:</strong> ${answeredCount}</p>
            <p>Are you sure you want to submit your exam?</p>
        `,
            icon: "warning",
            showCancelButton: true,
            confirmButtonText: "Yes, Submit Exam",
            cancelButtonText: "Cancel",
        }).then((result) => {
            if (result.isConfirmed) {
                saveAndChangeQuestion(currentQuestionIndex, function () {
                    submitExam();
                });
            }
        });
    }
    function submitExam() {
        $.ajax({
            url: '/UserExam/SubmitExam',
            type: 'POST',
            data: { userExamId: userExamId },
            success: function (response) {
                window.location.href = response.redirectUrl;
            },
            error: function (xhr) {
                console.error("❌ Error submitting exam:", xhr.responseText);
                Swal.fire("Error", "Failed to submit exam. Please try again.", "error");
            }
        });
    }
    function getRemainingTimeFromServer() {
        $.ajax({
            url: '/UserExam/GetRemainingTime',
            type: 'GET',
            data: { userExamId: userExamId },
            success: function (response) {
                startTimer(response.minutes, response.seconds);
            },
            error: function (xhr) {
                console.error("❌ Error fetching remaining time:", xhr.responseText);
            }
        });
    }

    // Start Timer Countdown
    function startTimer(minutes, seconds) {
        remainingMinutes = minutes;
        remainingSeconds = seconds;
        updateTimerDisplay();

        // Start countdown
        timerInterval = setInterval(updateTimer, 1000);
    }

    // Update Timer Every Second
    function updateTimer() {
        if (remainingSeconds === 0) {
            if (remainingMinutes === 0) {
                showTimeUpPopup();
                clearInterval(timerInterval);
                return;
            }
            remainingMinutes--;
            remainingSeconds = 59;
        } else {
            remainingSeconds--;
        }

        updateTimerDisplay();
    }

    // Update Timer Display in UI
    function updateTimerDisplay() {
        $("#time").text(remainingMinutes + " min " + remainingSeconds + " sec");
    }
    function showTimeUpPopup() {
        Swal.fire({
            title: "⏳ Time is Up!",
            html: `
                <p>Your exam time is over.</p>
                <p><strong>Only your attempted answers will be submitted.</strong></p>
            `,
            icon: "warning",
            allowOutsideClick: false,  // Prevent closing on outside click
            allowEscapeKey: false,     // Prevent closing with ESC
            showConfirmButton: true,   // Show only OK button
            confirmButtonText: "OK"
        }).then(() => {
            saveCurrentAnswerAndSubmit(); // Call function to submit attempted answers
        });
    }
</script>
<script>
    history.pushState(null, "", location.href);
    window.onpopstate = function () {
        history.pushState(null, "", location.href);
    };
</script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
