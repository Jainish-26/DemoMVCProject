@model DemoMVC.WebUi.Models.ExamQuestionViewModel

@{
    ViewBag.Title = "Exam Questions";
    int totalQuestions = Model.Questions.Count;
    Layout = null;
    int durationMin = Model.Exam.DurationMin;
    int viewBagUserExamId = ViewBag.UserExamId;
}
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
<!-- In the head section -->
<link href="~/content/fancybox/fancybox.css" rel="stylesheet" />


<style>
    body {
        font-family: Arial, sans-serif;
        background-color: #f4f4f4;
        padding: 10px;
    }

    .exam-header {
        position: sticky;
        top: 0;
        background: #fff;
        /*        padding: 20px;*/
        border-bottom: 3px solid #ddd;
        z-index: 1000;
        display: flex;
        justify-content: space-around;
        align-items: center;
        font-size: 18px;
        font-weight: bold;
        box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
        text-align: center;
        flex-wrap: wrap;
    }

    .exam-container {
        display: flex;
        width: 100%;
        gap: 15px;
    }

    /* Left Section: Question Container (80%) */
    .question-section {
        width: 80%;
    }

    /* Right Section: Question Palette (20%) */
    .question-palette {
        width: 20%;
        padding: 15px;
        margin-top: 20px;
        background: #f8f9fa;
        border-radius: 8px;
        box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
        height: fit-content;
        min-height: 640px;
    }

        /* Palette Heading */
        .question-palette h4 {
            font-size: 18px;
            font-weight: bold;
            margin-bottom: 10px;
        }

    /* Palette Buttons */
    #palette-buttons {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
    }

    .palette-btn {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        border: none;
        font-weight: bold;
        margin: 5px;
        cursor: pointer;
        transition: 0.3s;
        box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.2);
    }

    /* Status Colors */
    .not-visited {
        background-color: gray;
        color: white;
    }

    .current {
        background-color: blue;
        color: white;
    }

    .visited {
        background-color: yellow;
    }

    .answered {
        background-color: green;
        color: white;
    }

    .color-legend {
        display: flex;
        flex-direction: column;
        align-items: flex-start; /* Align to the left */
        font-size: 14px;
        margin-left: 10px; /* Optional: Adjust for better spacing */
    }

    .legend-box {
        display: inline-block;
        width: 15px;
        height: 15px;
        margin-right: 10px;
        border-radius: 3px;
    }

    .yellow {
        background-color: yellow;
    }

    .blue {
        background-color: blue;
    }

    .green {
        background-color: green;
    }

    .gray {
        background-color: gray;
    }


    /* Existing Styles - Keeping Your Question Container UI */
    .question-container {
        margin-top: 20px;
        padding: 25px;
        background: #fff;
        border-radius: 8px;
        box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
        position: relative;
        min-height: 640px;
    }

    .question-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        font-weight: bold;
        padding-bottom: 10px;
    }

    .text-answer-box textarea {
        width: 100%;
        min-height: 120px;
        resize: vertical;
        padding: 10px;
        font-size: 16px;
        border-radius: 5px;
        border: 1px solid #ccc;
    }

    .question-page {
        display: none;
        max-height: 600px; /* adjust as needed */
        overflow-y: auto;
        padding-right: 10px; /* prevent content hiding under scrollbar */
    }

        .question-page.active {
            display: block;
            overflow-y: auto;
        }


    .answer-item {
        margin-left: 10px;
        margin-bottom: 10px;
    }

        .answer-item .d-flex {
            gap: 10px; /* space between icon and text */
            align-items: center;
            display: flex;
            flex-wrap: wrap; /* wrap if too long, optional */
        }

    .form-check-input {
        margin: 0;
        padding: 0;
        cursor: pointer;
    }

    .answer-text {
        font-size: 18px;
        line-height: 1.4;
        cursor: pointer;
    }

    img {
        max-width: 400px;
        display: block;
        margin: 10px auto;
        border-radius: 10px;
        box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.2);
    }

    /* Navigation Buttons */
    .navigation-buttons {
        position: absolute;
        bottom: 15px;
        left: 0;
        right: 0;
        display: flex;
        justify-content: space-between;
        padding: 10px 25px;
        background: #fff;
    }

    .btn-custom {
        padding: 10px 20px;
        font-size: 18px;
        font-weight: bold;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition: 0.3s;
    }

    .btn-prev {
        background-color: #6c757d;
    }

    .btn-next {
        background-color: #007bff;
    }

    .btn-save {
        background-color: seagreen;
    }

    .btn-prev:hover {
        background-color: #5a6268;
    }

    .btn-next:hover {
        background-color: #0056b3;
    }

    .btn-save:hover {
        background-color: forestgreen;
    }

    .btn-prev:disabled, .btn-next:disabled {
        background-color: #ccc;
        cursor: not-allowed;
    }

    .btn-save:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }

    /*Pop Up*/
    .modal {
        display: none;
        position: fixed;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        justify-content: center;
        align-items: center;
    }

    .modal-content {
        background: white;
        padding: 20px;
        border-radius: 8px;
        text-align: center;
        width: 350px;
    }

    .confirm-btn {
        background-color: green;
        color: white;
        padding: 10px;
        border: none;
        cursor: pointer;
        margin-right: 10px;
    }

    .cancel-btn {
        background-color: red;
        color: white;
        padding: 10px;
        border: none;
        cursor: pointer;
    }
</style>


<!-- Before closing body tag -->
<script src="~/content/fancybox/fancybox.umd.js"></script>

<div class="exam-header">
    <div><h2>@Model.Exam.ExamName</h2></div>
    <div><p><strong>Exam Code:</strong> @Model.Exam.ExamCode</p></div>
    <div><p><strong>Total Marks:</strong> @Model.Exam.TotalMarks</p></div>
    <div><p><strong>Passing Marks:</strong> @Model.Exam.PassingMarks</p></div>
    <div><p><strong>Time Left:</strong> <span id="time" style=" color:red">@Model.Exam.DurationMin</span></p></div>
</div>
<div class="exam-container">
    <!-- Left: Questions (80%) -->
    <div class="question-section">
        <div class="question-container">
            @for (int i = 0; i < totalQuestions; i++)
            {
                var question = Model.Questions[i];

                <div class="question-page @(i == 0 ? "active" : "")" id="question-@i" data-question-id="@question.QuestionId">
                    <div class="question-header">
                        <h4>Q@(i + 1): @question.QuestionText</h4>
                        <span class="question-marks">Marks: @question.Marks</span>
                    </div>

                    @if (question.QuestionImage != null && question.QuestionImage.Any())
                    {
                        var galleryId = $"gallery_{question.QuestionId}";

                        <div class="image-gallery mb-3">
                            <div class="row g-2">
                                @for (int s = 0; s < question.QuestionImage.Count; s++)
                                {
                                    var image = question.QuestionImage[s];
                                    var fullImagePath = Url.Content("~/content/QuestionImage/" + image);
                                    var thumbIndex = s;

                                    <div class="col-4 col-md-3">
                                        <a href="@fullImagePath"
                                           data-fancybox="@galleryId"
                                           data-caption=@image
                                           class="d-block thumbnail-link">
                                            <img src="@fullImagePath"
                                                 alt="Question Image @(thumbIndex + 1)"
                                                 class="img-thumbnail w-100"
                                                 style="height: 100px; object-fit: cover;" />
                                        </a>
                                    </div>
                                }
                            </div>
                        </div>
                    }


                    @if (question.QuestionType == "Single Choice MCQ")
                    {
                        foreach (var answer in question.Answers)
                        {
                            <div class="answer-item">
                                <div class="d-flex align-items-center">
                                    <input type="radio" name="selectedAnswer_@i" value="@answer.AnswerText" class="form-check-input">
                                    <span class="answer-text">@answer.AnswerText</span>
                                </div>
                            </div>
                        }
                    }
                    else if (question.QuestionType == "Multiple Choice MCQ")
                    {
                        foreach (var answer in question.Answers)
                        {
                            <div class="answer-item">
                                <div class="d-flex align-items-center">
                                    <input type="checkbox" name="selectedAnswers_@i" value="@answer.AnswerText" class="form-check-input">
                                    <span class="answer-text">@answer.AnswerText</span>
                                </div>
                            </div>
                        }
                    }
                    else if (question.QuestionType == "Text Answer" || question.QuestionType == "SQL Query")
                    {
                        <div class="text-answer-box">
                            <textarea class="form-control" name="textAnswer_@i" rows="4" placeholder="Type your answer here..."></textarea>
                        </div>
                    }
                    else
                    {
                        <p class="text-muted">Invalid Question Type</p>
                    }
                </div>
            }

            <div class="navigation-buttons">
                <button class="btn-custom btn-prev" disabled>Previous</button>
                <button class="btn-custom btn-save" id="btn-save">Save</button>
                <button class="btn-custom btn-next">Next</button>
            </div>
        </div>
    </div>

    <!-- Right: Question Palette (20%) -->
    <div class="question-palette">
        <div class="color-legend">
            <p><span class="legend-box yellow"></span> Visited Question</p>
            <p><span class="legend-box blue"></span> Current Question</p>
            <p><span class="legend-box green"></span> Answered Question</p>
            <p><span class="legend-box gray"></span> Not Visited Question</p>
        </div>
        <div class="palette-buttons">
            @for (int i = 0; i < totalQuestions; i++)
            {
                <button class="palette-btn not-visited" data-index="@i" id="palette-@i">@(@i + 1)</button>
            }
        </div>
    </div>
</div>
<div id="saveExamModal" class="modal">
    <div class="modal-content">
        <h2>Confirm Exam Submission</h2>
        <p>You are about to submit your exam.</p>
        <p><strong>Total Questions:</strong> <span id="total-questions"></span></p>
        <p><strong>Answered Questions:</strong> <span id="answered-questions"></span></p>
        <p><strong>Unanswered Questions:</strong> <span id="unanswered-questions"></span></p>

        <button onclick="confirmExamSubmission()" class="confirm-btn">Submit Exam</button>
        <button onclick="closeSavePopup()" class="cancel-btn">Cancel</button>
    </div>
</div>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script>
    $(document).ready(function () {
    let userExamId = @viewBagUserExamId;
    let totalQuestions = @totalQuestions;
    let currentQuestionIndex = 0;
    let answersData = {};
    let timerInterval;
    let remainingMinutes = 0, remainingSeconds = 0;

    //$(".question-page").first().show(); // Show first question
    getRemainingTimeFromServer();
    loadAnswersFromDatabase();

    $(".palette-btn").on("click", function () {
        let questionIndex = parseInt($(this).attr("data-index"));
        saveAndChangeQuestion(questionIndex);
    });

    $(".btn-next").on("click", function () {
        saveAndChangeQuestion(currentQuestionIndex + 1);
    });

    $(".btn-prev").on("click", function () {
        saveAndChangeQuestion(currentQuestionIndex - 1);
    });

    $(".question-page").on("input", function () {
        let questionId = $(this).attr("data-question-id");
        let answer = getCurrentAnswer($(this));

        answersData[questionId] = { AnswerText: answer, IsVisited: true };
        updateQuestionPalette();
        checkAllQuestionsVisited();
    });
        Fancybox.bind("[data-fancybox]", {
            // Options
            buttons: [
                "zoom",
                "slideShow",
                "fullScreen",
                "download",
                "thumbs",
                "close"
            ],
            thumbs: {
                autoStart: true, // Show thumbnails on opening
            }
        });
    function loadAnswersFromDatabase() {
        $.ajax({
            url: '/UserAnswer/GetAllAnswers',
            type: 'GET',
            data: { userExamId: userExamId },
            success: function (response) {
                if (response.success && response.data) {
                    answersData = {};
                    $.each(response.data, function (_, ans) {
                        answersData[ans.QuestionId] = {
                            AnswerText: ans.AnswerText || "",
                            IsVisited: ans.IsVisited || false
                        };
                    });
                }
                applyPrefilledAnswers();
                updateQuestionPalette();
            },
            error: function (xhr) {
                console.error("❌ Error loading answers:", xhr.responseText);
            }
        });
    }

    function applyPrefilledAnswers() {
        $(".question-page").each(function () {
            let questionId = $(this).attr("data-question-id");
            let answerData = answersData[questionId];

            if (answerData) {
                let answer = answerData.AnswerText || "";

                $(this).find("input[type='radio']").each(function () {
                    if ($(this).val() === answer) $(this).prop("checked", true);
                });

                $(this).find("input[type='checkbox']").each(function () {
                    let values = answer.split(",");
                    if (values.includes($(this).val())) $(this).prop("checked", true);
                });

                $(this).find("textarea").val(answer);
            }
        });
        checkAllQuestionsVisited();
    }

    function updateQuestionPalette() {
        $(".palette-btn").each(function (index) {
            let questionPage = $(".question-page").eq(index);
            let questionId = questionPage.attr("data-question-id");
            let answerData = answersData[questionId] || {};
            let status = "not-visited";

            if (answerData.AnswerText) {
                status = "answered";
            } else if (answerData.IsVisited) {
                status = "visited";
            }

            $(this).removeClass("not-visited visited answered current").css("background", "gray");

            if (index === currentQuestionIndex) {
                $(this).addClass("current").css("background", "blue");
            } else if (status === "answered") {
                $(this).addClass("answered").css("background", "green");
            } else if (status === "visited") {
                $(this).addClass("visited").css("background", "yellow");
            }
        });
    }

    function saveAndChangeQuestion(newIndex, callback = null) {
        if (newIndex < 0 || newIndex >= totalQuestions) return;

        let currentPage = $(".question-page").eq(currentQuestionIndex);
        let questionId = currentPage.attr("data-question-id");
        let answer = getCurrentAnswer(currentPage);

        let userAnswerModel = {
            UserExamId: userExamId,
            QuestionId: questionId,
            AnswerText: answer,
            IsVisited: true
        };

        $.ajax({
            url: '/UserAnswer/SaveUserAnswer',
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify(userAnswerModel),
            success: function () {
                answersData[questionId] = { AnswerText: answer, IsVisited: true };
                if (typeof callback === "function") {
                    callback();
                } else {
                    changeQuestion(newIndex);
                }
            },
            error: function (error) {
                Swal.fire("Warning", error.message, "warning");

            }
        });
    }

    function getCurrentAnswer(page) {
        let answer = "";

        if (page.find("input[type='radio']:checked").length > 0) {
            answer = page.find("input[type='radio']:checked").val();
        } else if (page.find("input[type='checkbox']:checked").length > 0) {
            answer = page.find("input[type='checkbox']:checked").map(function () {
                return $(this).val();
            }).get().join(",");
        } else if (page.find("textarea").length > 0) {
            answer = page.find("textarea").val();
        }

        return answer;
    }

    function changeQuestion(index) {
        if (index < 0 || index >= totalQuestions) return;

        $(".question-page").eq(currentQuestionIndex).hide();
        $(".question-page").eq(index).show();
        currentQuestionIndex = index;

        $(".btn-prev").prop("disabled", currentQuestionIndex === 0);
        $(".btn-next").prop("disabled", currentQuestionIndex === totalQuestions - 1);
        checkAllQuestionsVisited();
        updateQuestionPalette();
    }

    function checkAllQuestionsVisited() {
        let saveButton = $(".btn-save");
        let visitedCount = Object.values(answersData).filter(q => q.IsVisited).length;
        if (visitedCount >=totalQuestions -1) {
            saveButton.prop("disabled", false);
        } else {
            saveButton.prop("disabled", true);
        }
    }

    function getRemainingTimeFromServer() {
        $.ajax({
            url: '/UserExam/GetRemainingTime',
            type: 'GET',
            data: { userExamId: userExamId },
            success: function (response) {
                startTimer(response.minutes, response.seconds);
            },
            error: function (xhr) {
                console.error("❌ Error fetching remaining time:", xhr.responseText);
            }
        });
    }

    function startTimer(minutes, seconds) {
        remainingMinutes = minutes;
        remainingSeconds = seconds;
        updateTimerDisplay();
        timerInterval = setInterval(updateTimer, 1000);
    }

    function updateTimer() {
        if (remainingSeconds === 0) {
            if (remainingMinutes === 0) {
                showTimeUpPopup();
                clearInterval(timerInterval);
                return;
            }
            remainingMinutes--;
            remainingSeconds = 59;
        } else {
            remainingSeconds--;
        }
        updateTimerDisplay();
    }
        $(document).ready(function () {
            $("#btn-save").click(function () {
                showSavePopup();
            });

            
        });

        function showSavePopup() {
            let answeredCount = $(".answered").length + 1;

            Swal.fire({
                title: "Confirm Exam Submission",
                html: `
            <p><strong>Total Questions:</strong> ${totalQuestions}</p>
            <p><strong>Attempted Questions:</strong> ${answeredCount}</p>
            <p>Are you sure you want to submit your exam?</p>
        `,
                icon: "warning",
                showCancelButton: true,
                confirmButtonText: "Yes, Submit Exam",
                cancelButtonText: "Cancel",
            }).then((result) => {
                if (result.isConfirmed) {
                    saveAndChangeQuestion(currentQuestionIndex, function () {
                        submitExam();
                    });
                }
            });
        }


    function updateTimerDisplay() {
        $("#time").text(remainingMinutes + " min " + remainingSeconds + " sec");
    }

    function showTimeUpPopup() {
        Swal.fire({
            title: "⏳ Time is Up!",
            html: `<p>Your exam time is over.</p>`,
            icon: "warning",
            allowOutsideClick: false,
            showConfirmButton: true,
            confirmButtonText: "OK"
        }).then(() => {
            saveAndChangeQuestion(currentQuestionIndex, submitExam);
        });
    }

    function submitExam() {
        $.ajax({
            url: '/UserExam/SubmitExam',
            type: 'POST',
            data: { userExamId: userExamId },
            success: function (response) {
                location.reload();
                setTimeout(function () {
                    window.location.href = response.redirectUrl;
                }, 500);
            },
            error: function (xhr) {
                console.error("❌ Error submitting exam:", xhr.responseText);
                Swal.fire("Error", "Failed to submit exam. Please try again.", "error");
            }
        });
    }
});


</script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
