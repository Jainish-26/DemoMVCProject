@model DemoMVC.WebUi.Models.UserExamCheckingModel
@using Newtonsoft.Json
@{
    ViewBag.Title = "Exam Checking";
    var userExamId = Model.UserExamId;
}
<style>
    body {
        font-family: Arial, sans-serif;
        background-color: #f4f4f4;
    }

    .exam-header {
        position: sticky;
        margin-top: 10px;
        background: #fff;
        min-height: 70px;
        border-bottom: 3px solid #ddd;
        z-index: 1000;
        display: flex;
        justify-content: space-around;
        align-items: center;
        font-size: 18px;
        font-weight: bold;
        box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
        text-align: center;
        flex-wrap: wrap;
    }

    .exam-container {
        display: flex;
        width: 100%;
        gap: 15px;
    }

    /* Left Section: Question Container (80%) */
    .question-section {
        width: 80%;
    }

    /* Right Section: Question Palette (20%) */
    .question-palette {
        width: 20%;
        padding: 15px;
        margin-top: 20px;
        background: #f8f9fa;
        border-radius: 8px;
        box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
        height: fit-content;
        min-height: 530px;
    }

        /* Palette Heading */
        .question-palette h4 {
            font-size: 18px;
            font-weight: bold;
            margin-bottom: 10px;
        }

    /* Palette Buttons */
    /* Palette Buttons */
    #palette-buttons {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
    }

    .palette-btn {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        border: none;
        font-weight: bold;
        margin: 5px;
        cursor: pointer;
        transition: 0.3s;
        box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.2);
    }

    /* Status Colors */


    .correct {
        background-color: green; /* Question evaluated */
        color: white;
    }

    .inCorrect {
        background-color: red; /* Question evaluated */
        color: white;
    }

    .for-review {
        background-color: orange; /* Marks = 0 and not evaluated */
        color: white;
    }

    .current {
        background-color: darkblue;
        color: white;
    }


    .color-legend {
        display: flex;
        flex-direction: column;
        align-items: flex-start; /* Align to the left */
        font-size: 14px;
        margin-left: 10px; /* Optional: Adjust for better spacing */
    }

    .legend-box {
        display: inline-block;
        width: 15px;
        height: 15px;
        margin-right: 10px;
        border-radius: 3px;
    }

    .yellow {
        background-color: orange;
    }

    .blue {
        background-color: blue;
    }

    .green {
        background-color: green;
    }

    .red{
        background-color :red ;
    }


    /* Existing Styles - Keeping Your Question Container UI */
    .question-container {
        padding: 25px;
        margin-top :20px;
        background: #fff;
        border-radius: 8px;
        box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
        min-height: 530px;
        max-height: 600px;
        display: flex;
        flex-direction: column;
        overflow: hidden; /* Prevents the whole container from scrolling */
    }

    .question-page {
        flex-grow: 1;
        overflow-y: auto; /* Enables scrolling for question content */
        max-height: 480px; /* Adjust height as needed */
        padding-right: 10px; /* Avoids cutting off scrollbar */
        scrollbar-width: thin; /* Makes the scrollbar smaller */
        scrollbar-color: #aaa transparent; /* Custom scrollbar color */
    }

        /* Custom Scrollbar for WebKit Browsers */
        .question-page::-webkit-scrollbar {
            width: 8px;
        }

        .question-page::-webkit-scrollbar-thumb {
            background-color: #ccc;
            border-radius: 4px;
        }

    .question-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        font-size: 20px;
        font-weight: bold;
        padding-bottom: 10px;
    }

    .question-marks {
        font-size: 18px;
        font-weight: bold;
    }

    h3 {
        font-size: 20px;
        font-weight: bold;
    }

    .text-answer-box textarea {
        width: 100%;
        margin: 10px;
        min-height: 120px;
        resize: vertical;
        padding: 10px;
        font-size: 16px;
        border-radius: 5px;
        border: 1px solid #ccc;
    }

    .answer-item {
        padding: 10px;
        font-size: 18px;
    }

    img {
        max-width: 400px;
        display: block;
        margin: 10px auto;
        border-radius: 10px;
        box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.2);
    }


    
    /*Save Button*/
    .navigation-buttons {
        position: absolute;
        bottom: 15px;
        left: 0;
        right: 0;
        width:80%;
        display: flex;
        justify-content: space-between; /* Ensures buttons are spaced evenly */
        padding: 10px 20px; /* Adds padding for better spacing */
    }

    .btn-custom {
        padding: 10px 20px;
        font-size: 18px;
        font-weight: bold;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition: 0.3s;
    }

    .btn-prev {
        background-color: #6c757d;
    }

    .btn-next {
        background-color: #007bff;
    }

    .btn-save {
        background-color: seagreen;
    }

    .btn-prev:hover {
        background-color: #5a6268;
    }

    .btn-next:hover {
        background-color: #0056b3;
    }

    .btn-save:hover {
        background-color: forestgreen;
    }

    .btn-prev:disabled, .btn-next:disabled {
        background-color: #ccc;
        cursor: not-allowed;
    }
</style>
<div class="exam-header">
    <div><h2>@Model.Exam.ExamName</h2></div>
    <div><p><strong>Exam Code:</strong> @Model.Exam.ExamCode</p></div>
    <div><p><strong>Total Marks:</strong> @Model.Exam.TotalMarks</p></div>
    <div><p><strong>Passing Marks:</strong> @Model.Exam.PassingMarks</p></div>
    <div><p><strong>Candidate Name:</strong> @Model.UserProfile.Name</p></div>
</div>

<div class="exam-container">


    <div class="question-section">
        <div class="question-container">
            @for (int i = 0; i < Model.Questions.Count; i++)
            {
                var question = Model.Questions[i];
                var userAnswer = Model.UserAnswers.FirstOrDefault(a => a.QuestionId == question.QuestionId);
                var correctAnswers = question.Answers.Where(a => a.IsCorrect).Select(a => a.AnswerText).ToList(); // ✅ Fetch correct answers

                <div class="question-page" id="question-@i" style="display: @(i == 0 ? "block" : "none")">
                    <div class="question-header">
                        <h3>Q@(i + 1): @question.QuestionText (Marks : @question.Marks)</h3>
                    </div>

                    @if (question.QuestionType == "Single Choice MCQ")
                    {
                        bool isCorrect = userAnswer != null && correctAnswers.Contains(userAnswer.Answer);
                        <div class="marks-display">
                            <strong>Obtained Marks:</strong>
                            <span style="font-weight: bold; color: blue;">@userAnswer.ObtainedMarks</span>
                        </div>

                        foreach (var answer in question.Answers)
                        {
                            bool isUserAnswer = userAnswer?.Answer == answer.AnswerText;
                            bool isCorrectAnswer = correctAnswers.Contains(answer.AnswerText);

                            <div class="answer-item">
                                <input type="radio" disabled @(isUserAnswer ? "checked" : "")>
                                <span>@answer.AnswerText</span>

                                @if (isCorrectAnswer && isUserAnswer)
                                {
                                    <span style="color: green; font-weight: bold;">✅</span>
                                }
                                else if (isUserAnswer && !isCorrectAnswer)
                                {
                                    <span style="color: red; font-weight: bold;">❌</span>
                                }
                                else if (isCorrectAnswer)
                                {
                                    <span style="color: green; font-weight: bold;">✔</span>
                                }
                            </div>
                        }


                    }

                    else if (question.QuestionType == "Multiple Choice MCQ")
                    {
                        var userAnswers = userAnswer?.Answer?.Split(',') ?? new string[] { };
                        <div class="marks-display" style="margin-top: 10px;">
                            <strong>Obtained Marks:</strong>
                            <span style="font-weight: bold; color: blue;">@userAnswer.ObtainedMarks</span>
                        </div>
                        foreach (var answer in question.Answers)
                        {
                            bool isUserAnswer = userAnswers.Contains(answer.AnswerText);
                            bool isCorrectAnswer = correctAnswers.Contains(answer.AnswerText);

                            <div class="answer-item">
                                <input type="checkbox" disabled @(isUserAnswer ? "checked" : "")>
                                <span>@answer.AnswerText</span>

                                @if (isCorrectAnswer && isUserAnswer)
                                {
                                    <span style="color: green; font-weight: bold;">✅</span>
                                }
                                else if (isUserAnswer && !isCorrectAnswer)
                                {
                                    <span style="color: red; font-weight: bold;">❌</span>
                                }
                                else if (isCorrectAnswer)
                                {
                                    <span style="color: green; font-weight: bold;">✔</span>
                                }
                            </div>
                        }
                    }
                    else if (question.QuestionType == "Text Answer" || question.QuestionType == "SQL Query")
                    {
                        <div class="marks-field">
                            <label><strong>Obtained Marks:</strong></label>
                            <input type="number" class="marks-input" id="marks-@i"
                                   value="@userAnswer.ObtainedMarks"
                                   style="font-weight: bold; color: blue; width: 80px;"
                                   min="0" max="@question.Marks">
                        </div>
                        <div class="evaluate-checkbox">
                            <label>
                                <input type="checkbox" class="evaluate-toggle" id="evaluate-@i"
                                       @(userAnswer.IsEvaluate ? "checked" : "")>
                                <strong>Mark as Evaluated</strong>
                            </label>
                        </div>
                        <div class="text-answer-box" style="padding-left:20px; padding-top:20px">
                            <label><strong>User Answer:</strong></label>
                            <textarea class="form-control" readonly>@Model.UserAnswers[i].Answer</textarea>
                        </div>
                        <div class="text-answer-box" style="padding-left: 20px; padding-top: 20px">
                            <label><strong>Correct Answer(s):</strong></label>
                            <textarea class="form-control" readonly>@string.Join(", ", correctAnswers)</textarea> <!-- ✅ Fix applied -->
                        </div>
                    }
                </div>
            }
            <div class="navigation-buttons">
                <button class="btn-custom btn-prev" disabled>Previous</button>
                <button class="btn-custom btn-save" id="submit-exam-btn">Save</button>
                <button class="btn-custom btn-next">Next</button>
            </div>
        </div>
    </div>
    <div class="question-palette">
        <div class="color-legend">
            <p><span class="legend-box yellow"></span> Not Evalueated Question</p>
            <p><span class="legend-box blue"></span> Current Question</p>
            <p><span class="legend-box green"></span> Correct Question</p>
            <p><span class="legend-box red"></span> InCorrect Question</p>
        </div>
        <div class="palette-buttons">
            @for (int i = 0; i < Model.Questions.Count; i++)
            {
                <button class="palette-btn" data-target="question-@i">@(i + 1)</button>
            }
        </div>
    </div>
</div>

<script>
    $(document).ready(function () {
        debugger
        updatePaletteStatus();
        $("input.evaluate-toggle").each(function () {
            debugger
            let index = $(this).attr('id').split('-')[1];
            let marksInput = $("#marks-" + index);
            let userAns = userAnswers[index];
            let isEvaluated = userAns.IsEvaluate;
            let marks = userAns.ObtainedMarks;

            if (isEvaluated) {
                $(this).prop("checked", true);
                marksInput.prop("disabled", false).val(marks);
            } else {
                $(this).prop("checked", false);
                marksInput.prop("disabled", true).val(0);
            }
        });
    });

    // Store User Answer IDs and Marks in JavaScript Variables
    let userAnswers = @Html.Raw(JsonConvert.SerializeObject(Model.UserAnswers));
    let questionMarks = @Html.Raw(JsonConvert.SerializeObject(Model.Questions.Select(q => q.Marks)));
    let questions = @Html.Raw(JsonConvert.SerializeObject(Model.Questions));
    let currentIndex = 0;

    function updatePaletteStatus() {
        debugger
        $(".palette-btn").each(function (index) {
            let userAnswer = userAnswers[index];
            let isEvaluate = userAnswer?.IsEvaluate || false;
            let obtainedMarks = userAnswer?.ObtainedMarks || 0;

            // Remove all previous classes
            $(this).removeClass("not-visited for-review correct current inCorrect");

            // Highlight Current Question
            if (index === currentIndex) {
                $(this).addClass("current");  // Current question (Blue)
            }
            // Set Colors Based on Evaluation
            else if (isEvaluate && obtainedMarks > 0) {
                $(this).addClass("correct"); // Evaluated (Green)
            } else if (isEvaluate && obtainedMarks <= 0) {
                $(this).addClass("inCorrect"); // Evaluated (Green)
            } else if (obtainedMarks === 0 && !isEvaluate) {
                $(this).addClass("for-review"); // For Review (Orange)
            } else if (!userAnswer) {
                $(this).addClass("not-visited"); // Not Attempted (Gray)
            } 
        });
    }

    // Function to save marks for Text Answer or SQL Query
    function saveManualMarks(index, callback) {
        let question = questions[index];

        // Check if the question is of type "Text Answer" or "SQL Query"
        if (question.QuestionType === "Text Answer" || question.QuestionType === "SQL Query") {
            // Check if the 'Mark as Evaluated' checkbox is checked
            let isChecked = $("#evaluate-" + index).prop("checked");

            // Only proceed if the checkbox is checked
            if (isChecked) {
                let obtainedMarks = $("#marks-" + index).val();
                let userAnswerId = userAnswers[index]?.UserAnswerId;

                if (!userAnswerId) {
                    alert("Error: User Answer ID not found.");
                    return;
                }

                $.ajax({
                    url: '/UserExamCheck/SaveManualMarks',
                    type: 'POST',
                    data: { userAnswerId: userAnswerId, obtainedMarks: obtainedMarks },
                    success: function (response) {
                        if (response.success) {
                            // Update the userAnswers array with the saved marks and evaluate status
                            userAnswers[index].ObtainedMarks = obtainedMarks;
                            userAnswers[index].IsEvaluate = true; // Mark as evaluated
                            updatePaletteStatus(); // Update the question palette

                            // Call the callback function if provided
                            if (callback) callback();
                        } else {
                            alert("Error: " + response.message);
                            if (callback) callback(); // Proceed even if there is an error
                        }
                    },
                    error: function () {
                        alert("Error saving marks.");
                        if (callback) callback(); // Proceed even if there is an error
                    }
                });
            } else {    
                if (callback) callback(); // Proceed even if the checkbox is not checked
            }
        } else {
            // If not a text or SQL query, proceed without saving marks
            if (callback) callback();
        }
    }


    // Handle 'Mark as Evaluated' checkbox change
    $("input.evaluate-toggle").on("change", function () {
        let index = $(this).attr('id').split('-')[1];
        let marksInput = $("#marks-" + index);
        let isChecked = $(this).prop('checked');

        if (isChecked) {
            marksInput.prop("disabled", false); // Enable marks input
        } else {
            marksInput.prop("disabled", true); // Disable marks input
            marksInput.val(0); // Optionally clear value when unchecked
        }
    });

    // Function to navigate between questions
    function navigateQuestion(direction) {
        let newIndex = currentIndex + direction;

        if (newIndex >= 0 && newIndex < questions.length) {
            saveManualMarks(currentIndex, function () {
                $(".question-page").hide();
                $("#question-" + newIndex).show();
                currentIndex = newIndex;

                // Enable/Disable buttons accordingly
                $(".btn-prev").prop("disabled", currentIndex === 0);
                $(".btn-next").prop("disabled", currentIndex === questions.length - 1);

                updatePaletteStatus(); // Update the palette color
            });
        }
    }
    $(document).on("input", ".marks-input", function () {
        let maxMarks = parseInt($(this).attr("max"), 10); // Get max marks from attribute
        let minMarks = parseInt($(this).attr("min"), 10);
        let enteredMarks = parseInt($(this).val(), 10) || 0; // Default to 0 if NaN

        // Enforce min/max limits
        if (enteredMarks < minMarks) {
            $(this).val(minMarks); // Set to min if less than 0
        } else if (enteredMarks > maxMarks) {
            $(this).val(maxMarks); // Set to max if greater than question marks
        }
    });
    // Handle Previous and Next button clicks
    $(".btn-prev").on("click", function () {
        navigateQuestion(-1);
    });

    $(".btn-next").on("click", function () {
        navigateQuestion(1);
    });


    // Handle question navigation using the palette
    $(".palette-btn").on("click", function () {
        let targetIndex = parseInt($(this).data("target").split("-")[1]);

        saveManualMarks(currentIndex, function () {
            $(".question-page").hide();
            $("#question-" + targetIndex).show();
            currentIndex = targetIndex;

            // Enable/Disable buttons accordingly
            $(".btn-prev").prop("disabled", currentIndex === 0);
            $(".btn-next").prop("disabled", currentIndex === questions.length - 1);

            updatePaletteStatus(); // Update the palette color
        });
    });

    // Function to check if all questions are evaluated before submitting
    function checkEvaluationAndSubmit() {
        let totalQuestions = userAnswers.length; // Total questions
        let evaluatedCount = userAnswers.filter(ans => ans.IsEvaluate).length; // Count evaluated questions

        if (evaluatedCount === totalQuestions) {
            submitExam(); // All questions evaluated → Submit exam
        } else {
            let notEvaluatedIndexes = [];

            userAnswers.forEach((ans, index) => {
                if (!ans.IsEvaluate) {
                    notEvaluatedIndexes.push(index + 1); // Store 1-based index
                }
            });
            Swal.fire("Warning", ` Please First Check Question No :- ${notEvaluatedIndexes}`, "warning");
        }
    }

    function submitExam() {
        let totalObtainedMarks = Math.round(userAnswers.reduce((sum, ans) => sum + (parseFloat(ans.ObtainedMarks) || 0), 0));

        $.ajax({
            url: '/UserExamCheck/SaveUserResult',
            type: 'POST',
            data: {
                userExamId: @userExamId,
                totalObtainedMarks: totalObtainedMarks // Send integer value
            },
            success: function (response) {
                if (response.success) {
                    window.location.href = "/UserExam/Index"; // Redirect to the final view
                } else {
                    alert("❌ Error submitting exam: " + response.message);
                }
            },
            error: function () {
                alert("❌ Error submitting the exam.");
            }
        });
    }

    $("#submit-exam-btn").click(function () {
        saveManualMarks(currentIndex, function () {
            checkEvaluationAndSubmit();
        });
    });

</script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

